##FILENAME:${table.GetClassName()}.cs
##
## Plain Old C# Object entity class
##
namespace $namespace
{
	// data object class ${table.GetClassName()} generated from ${table}
	// $developer [$date] Created

	using System;
#if ($PropChange)
	using System.ComponentModel;
#end

	public $Partial class ${table.GetClassName()} 
#if ($PropChange)
		: INotifyPropertyChanged
#end
	{

## property names (to avoid mis-spelling in an NHibernate Criteria)
		#region Property_Names

#foreach ($f in $fields)
		public static string Prop_${f.GetPropertyName()} = "${f.GetPropertyName()}";
#end

		#endregion

## private variables
		#region Private_Variables

#foreach ($f in $fields)
		private ${f.GetNetType()} ${f.GetPrivateVariableName()};
#end

		#endregion

		#region Constructors

## -- declare simple constructor
		public ${table.GetClassName()}()
		{
		}

##-- declare full constructor
		public ${table.GetClassName()}(
#set ($suffix = ",")
#foreach ($f in $fields)
#if ($velocityCount < $fields.Length)
#set ($suffix = ",")
#else
#set ($suffix = ")")
#end
			${f.GetNetType()} p${f.GetPrivateVariableName()}$suffix
#end
##-- constructor body
		{
##-- assign parameters to private variables
#foreach ($f in $fields)
			${f.GetPrivateVariableName()} = p${f.GetPrivateVariableName()};
#end
		}

		#endregion

		#region Properties

##-- declare properties (getters / setters)
#foreach ($f in $fields)
		public ${f.GetNetType()} ${f.GetPropertyName()}
		{
			get { return ${f.GetPrivateVariableName()}; }
#if (!${f.IsPrimaryKey()})
#if ($PropChange)
			set
			{
				if (${f.GetInEqualityTest()})
				{
					${f.GetPrivateVariableName()} = value;
					NotifyPropertyChanged(${table.GetClassName()}.Prop_${f.GetPropertyName()});
				}
			}
#else
			set { ${f.GetPrivateVariableName()} = value; }
#end
#end
		}

#end
		#endregion

#if ($PropChange)
		#region INotifyPropertyChanged Members

		public event PropertyChangedEventHandler PropertyChanged;

		private void NotifyPropertyChanged(String info)
		{
			if (PropertyChanged != null)
			{
				PropertyChanged(this, new PropertyChangedEventArgs(info));
			}
		}

		#endregion

#end
	} // ${table.GetClassName()}
}
