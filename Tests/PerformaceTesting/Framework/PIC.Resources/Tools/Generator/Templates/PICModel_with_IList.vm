##FILENAME:${table.GetClassName()}.g.cs
##
## Castle ActiveRecord entity class
##
// Business class ${table.GetClassName()} generated from ${table}
// Creator: Ray
// Created Date: [$date]

using System;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using Newtonsoft.Json;
using Castle.ActiveRecord;
using PIC.Data;
using PIC.Portal;
	
namespace ${namespace}.Model
{
	[ActiveRecord("$table")]
	public $Partial class ${table.GetClassName()} : ModelBase<${table.GetClassName()}>
	{
## property names (to avoid mis-spelling in an NHibernate Criteria)
		#region Property_Names

#foreach ($f in $fields)
		public static string Prop_${f.GetPropertyName()} = "${f.GetPropertyName()}";
#end

		#endregion

## private variables
		#region Private_Variables

#foreach ($f in $fields)
		private ${f.GetNetType()} ${f.GetPrivateVariableName()};
#end

#foreach($r in $related)
		private IList<${r.GetClassName()}> _${r.Table_Name} = new List<${r.GetClassName()}>();
#end

		#endregion

		#region Constructors

## -- declare simple constructor
		public ${table.GetClassName()}()
		{
		}

##-- declare full constructor
		public ${table.GetClassName()}(
#set ($suffix = ",")
#foreach ($f in $fields)
#if ($velocityCount < $fields.Length)
#set ($suffix = ",")
#else
#set ($suffix = ")")
#end
			${f.GetNetType()} p${f.GetPrivateVariableName()}$suffix
#end
##-- constructor body
		{
##-- assign parameters to private variables
#foreach ($f in $fields)
			${f.GetPrivateVariableName()} = p${f.GetPrivateVariableName()};
#end
		}

		#endregion

		#region Properties

##-- declare properties (getters / setters)
#foreach ($f in $fields)
		${f.GetFieldAttribute()}
		public ${f.GetNetType()} ${f.GetPropertyName()}
		{
			get { return ${f.GetPrivateVariableName()}; }
#if (!${f.IsPrimaryKey()})
#if ($PropChange)
			set
			{
				if (${f.GetInEqualityTest()})
				{
                    object oldValue = ${f.GetPrivateVariableName()};
#if ($f.IsForeignKey())
					if (value == null)
						${f.GetPrivateVariableName()} = null;
					else
						${f.GetPrivateVariableName()} = (value.${f.ForeignKeyInfo.PK_Column} > 0) ? value : null;
#else
					${f.GetPrivateVariableName()} = value;
#end
					RaisePropertyChanged(${table.GetClassName()}.Prop_${f.GetPropertyName()}, oldValue, value);
				}
			}
#else
			set { ${f.GetPrivateVariableName()} = value; }
#end
#else
			set { ${f.GetPrivateVariableName()} = value; }
#end

		}

#end
## map [hasmany()] properties using foreign key references
#foreach($r in $related)
		[JsonIgnore]
		[HasMany(typeof(${r.GetClassName()}), Table="${r.Table_Name}", ColumnKey="${r.Column_Name}", Cascade = ManyRelationCascadeEnum.All, Lazy = true)]
		public IList ${r.Table_Name}
		{
			get { return _${r.Table_Name}; }
			set { _${r.Table_Name} = value; }
		}
		
#end
		#endregion
	} // ${table.GetClassName()}
}
