<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE dotfuscatorMap SYSTEM "http://www.preemptive.com/dotfuscator/dtd/dotfuscatorMap_v1.1.dtd">
<dotfuscatorMap version="1.1">
    <header>
        <timestamp>2012-06-16T22:19:58</timestamp>
        <product version="5.0.2500.0" user="Unregistered " serial="000-00-000-391">Dotfuscator Community Edition</product>
    </header>
    <mapping>
        <module>
            <name>PIC.Core.dll</name>
            <type>
                <name>&lt;&gt;z__AspectsImplementationDetails</name>
                <newname>a</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.cctor</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>object[]</signature>
                        <name>aspects1</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>&lt;&gt;z__MulticastImpl</name>
                <newname>b</newname>
                <methodlist />
                <fieldlist />
            </type>
            <type>
                <name>&lt;PrivateImplementationDetails&gt;{9BDEEB98-9F3F-4442-8C84-8DAB92D1F963}</name>
                <newname>c</newname>
                <methodlist />
                <fieldlist>
                    <field>
                        <signature>&lt;PrivateImplementationDetails&gt;{9BDEEB98-9F3F-4442-8C84-8DAB92D1F963}/__StaticArrayInitTypeSize=12</signature>
                        <name>$$method0x6000500-1</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>&lt;PrivateImplementationDetails&gt;{9BDEEB98-9F3F-4442-8C84-8DAB92D1F963}/__StaticArrayInitTypeSize=1584</signature>
                        <name>$$method0x60005c4-1</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>&lt;PrivateImplementationDetails&gt;{9BDEEB98-9F3F-4442-8C84-8DAB92D1F963}/__StaticArrayInitTypeSize=12</name>
                <newname>c/b</newname>
                <methodlist />
                <fieldlist />
            </type>
            <type>
                <name>&lt;PrivateImplementationDetails&gt;{9BDEEB98-9F3F-4442-8C84-8DAB92D1F963}/__StaticArrayInitTypeSize=1584</name>
                <newname>c/a</newname>
                <methodlist />
                <fieldlist />
            </type>
            <type>
                <name>Microsoft.ApplicationBlocks.Data.SqlHelper</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(System.Data.SqlClient.SqlParameter[], object[])</signature>
                        <name>AssignParameterValues</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(System.Data.SqlClient.SqlParameter[], System.Data.DataRow)</signature>
                        <name>AssignParameterValues</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(System.Data.SqlClient.SqlCommand, System.Data.SqlClient.SqlParameter[])</signature>
                        <name>AttachParameters</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>System.Data.SqlClient.SqlCommand(System.Data.SqlClient.SqlConnection, string, string[])</signature>
                        <name>CreateCommand</name>
                    </method>
                    <method>
                        <signature>System.Data.DataSet(string, string, object[])</signature>
                        <name>ExecuteDataset</name>
                    </method>
                    <method>
                        <signature>System.Data.DataSet(string, System.Data.CommandType, string)</signature>
                        <name>ExecuteDataset</name>
                    </method>
                    <method>
                        <signature>System.Data.DataSet(string, System.Data.CommandType, string, System.Data.SqlClient.SqlParameter[])</signature>
                        <name>ExecuteDataset</name>
                    </method>
                    <method>
                        <signature>System.Data.DataSet(System.Data.SqlClient.SqlConnection, string, object[])</signature>
                        <name>ExecuteDataset</name>
                    </method>
                    <method>
                        <signature>System.Data.DataSet(System.Data.SqlClient.SqlConnection, System.Data.CommandType, string)</signature>
                        <name>ExecuteDataset</name>
                    </method>
                    <method>
                        <signature>System.Data.DataSet(System.Data.SqlClient.SqlConnection, System.Data.CommandType, string, System.Data.SqlClient.SqlParameter[])</signature>
                        <name>ExecuteDataset</name>
                    </method>
                    <method>
                        <signature>System.Data.DataSet(System.Data.SqlClient.SqlTransaction, string, object[])</signature>
                        <name>ExecuteDataset</name>
                    </method>
                    <method>
                        <signature>System.Data.DataSet(System.Data.SqlClient.SqlTransaction, System.Data.CommandType, string)</signature>
                        <name>ExecuteDataset</name>
                    </method>
                    <method>
                        <signature>System.Data.DataSet(System.Data.SqlClient.SqlTransaction, System.Data.CommandType, string, System.Data.SqlClient.SqlParameter[])</signature>
                        <name>ExecuteDataset</name>
                    </method>
                    <method>
                        <signature>System.Data.DataSet(string, string, System.Data.DataRow)</signature>
                        <name>ExecuteDatasetTypedParams</name>
                    </method>
                    <method>
                        <signature>System.Data.DataSet(System.Data.SqlClient.SqlConnection, string, System.Data.DataRow)</signature>
                        <name>ExecuteDatasetTypedParams</name>
                    </method>
                    <method>
                        <signature>System.Data.DataSet(System.Data.SqlClient.SqlTransaction, string, System.Data.DataRow)</signature>
                        <name>ExecuteDatasetTypedParams</name>
                    </method>
                    <method>
                        <signature>int32(string, string, object[])</signature>
                        <name>ExecuteNonQuery</name>
                    </method>
                    <method>
                        <signature>int32(string, System.Data.CommandType, string)</signature>
                        <name>ExecuteNonQuery</name>
                    </method>
                    <method>
                        <signature>int32(string, System.Data.CommandType, string, System.Data.SqlClient.SqlParameter[])</signature>
                        <name>ExecuteNonQuery</name>
                    </method>
                    <method>
                        <signature>int32(System.Data.SqlClient.SqlConnection, string, object[])</signature>
                        <name>ExecuteNonQuery</name>
                    </method>
                    <method>
                        <signature>int32(System.Data.SqlClient.SqlConnection, System.Data.CommandType, string)</signature>
                        <name>ExecuteNonQuery</name>
                    </method>
                    <method>
                        <signature>int32(System.Data.SqlClient.SqlConnection, System.Data.CommandType, string, System.Data.SqlClient.SqlParameter[])</signature>
                        <name>ExecuteNonQuery</name>
                    </method>
                    <method>
                        <signature>int32(System.Data.SqlClient.SqlTransaction, string, object[])</signature>
                        <name>ExecuteNonQuery</name>
                    </method>
                    <method>
                        <signature>int32(System.Data.SqlClient.SqlTransaction, System.Data.CommandType, string)</signature>
                        <name>ExecuteNonQuery</name>
                    </method>
                    <method>
                        <signature>int32(System.Data.SqlClient.SqlTransaction, System.Data.CommandType, string, System.Data.SqlClient.SqlParameter[])</signature>
                        <name>ExecuteNonQuery</name>
                    </method>
                    <method>
                        <signature>int32(string, string, System.Data.DataRow)</signature>
                        <name>ExecuteNonQueryTypedParams</name>
                    </method>
                    <method>
                        <signature>int32(System.Data.SqlClient.SqlConnection, string, System.Data.DataRow)</signature>
                        <name>ExecuteNonQueryTypedParams</name>
                    </method>
                    <method>
                        <signature>int32(System.Data.SqlClient.SqlTransaction, string, System.Data.DataRow)</signature>
                        <name>ExecuteNonQueryTypedParams</name>
                    </method>
                    <method>
                        <signature>System.Data.SqlClient.SqlDataReader(string, string, object[])</signature>
                        <name>ExecuteReader</name>
                    </method>
                    <method>
                        <signature>System.Data.SqlClient.SqlDataReader(string, System.Data.CommandType, string)</signature>
                        <name>ExecuteReader</name>
                    </method>
                    <method>
                        <signature>System.Data.SqlClient.SqlDataReader(string, System.Data.CommandType, string, System.Data.SqlClient.SqlParameter[])</signature>
                        <name>ExecuteReader</name>
                    </method>
                    <method>
                        <signature>System.Data.SqlClient.SqlDataReader(System.Data.SqlClient.SqlConnection, string, object[])</signature>
                        <name>ExecuteReader</name>
                    </method>
                    <method>
                        <signature>System.Data.SqlClient.SqlDataReader(System.Data.SqlClient.SqlConnection, System.Data.CommandType, string)</signature>
                        <name>ExecuteReader</name>
                    </method>
                    <method>
                        <signature>System.Data.SqlClient.SqlDataReader(System.Data.SqlClient.SqlConnection, System.Data.CommandType, string, System.Data.SqlClient.SqlParameter[])</signature>
                        <name>ExecuteReader</name>
                    </method>
                    <method>
                        <signature>System.Data.SqlClient.SqlDataReader(System.Data.SqlClient.SqlConnection, System.Data.SqlClient.SqlTransaction, System.Data.CommandType, string, System.Data.SqlClient.SqlParameter[], Microsoft.ApplicationBlocks.Data.SqlHelper/SqlConnectionOwnership)</signature>
                        <name>ExecuteReader</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>System.Data.SqlClient.SqlDataReader(System.Data.SqlClient.SqlTransaction, string, object[])</signature>
                        <name>ExecuteReader</name>
                    </method>
                    <method>
                        <signature>System.Data.SqlClient.SqlDataReader(System.Data.SqlClient.SqlTransaction, System.Data.CommandType, string)</signature>
                        <name>ExecuteReader</name>
                    </method>
                    <method>
                        <signature>System.Data.SqlClient.SqlDataReader(System.Data.SqlClient.SqlTransaction, System.Data.CommandType, string, System.Data.SqlClient.SqlParameter[])</signature>
                        <name>ExecuteReader</name>
                    </method>
                    <method>
                        <signature>System.Data.SqlClient.SqlDataReader(string, string, System.Data.DataRow)</signature>
                        <name>ExecuteReaderTypedParams</name>
                    </method>
                    <method>
                        <signature>System.Data.SqlClient.SqlDataReader(System.Data.SqlClient.SqlConnection, string, System.Data.DataRow)</signature>
                        <name>ExecuteReaderTypedParams</name>
                    </method>
                    <method>
                        <signature>System.Data.SqlClient.SqlDataReader(System.Data.SqlClient.SqlTransaction, string, System.Data.DataRow)</signature>
                        <name>ExecuteReaderTypedParams</name>
                    </method>
                    <method>
                        <signature>object(string, string, object[])</signature>
                        <name>ExecuteScalar</name>
                    </method>
                    <method>
                        <signature>object(string, System.Data.CommandType, string)</signature>
                        <name>ExecuteScalar</name>
                    </method>
                    <method>
                        <signature>object(string, System.Data.CommandType, string, System.Data.SqlClient.SqlParameter[])</signature>
                        <name>ExecuteScalar</name>
                    </method>
                    <method>
                        <signature>object(System.Data.SqlClient.SqlConnection, string, object[])</signature>
                        <name>ExecuteScalar</name>
                    </method>
                    <method>
                        <signature>object(System.Data.SqlClient.SqlConnection, System.Data.CommandType, string)</signature>
                        <name>ExecuteScalar</name>
                    </method>
                    <method>
                        <signature>object(System.Data.SqlClient.SqlConnection, System.Data.CommandType, string, System.Data.SqlClient.SqlParameter[])</signature>
                        <name>ExecuteScalar</name>
                    </method>
                    <method>
                        <signature>object(System.Data.SqlClient.SqlTransaction, string, object[])</signature>
                        <name>ExecuteScalar</name>
                    </method>
                    <method>
                        <signature>object(System.Data.SqlClient.SqlTransaction, System.Data.CommandType, string)</signature>
                        <name>ExecuteScalar</name>
                    </method>
                    <method>
                        <signature>object(System.Data.SqlClient.SqlTransaction, System.Data.CommandType, string, System.Data.SqlClient.SqlParameter[])</signature>
                        <name>ExecuteScalar</name>
                    </method>
                    <method>
                        <signature>object(string, string, System.Data.DataRow)</signature>
                        <name>ExecuteScalarTypedParams</name>
                    </method>
                    <method>
                        <signature>object(System.Data.SqlClient.SqlConnection, string, System.Data.DataRow)</signature>
                        <name>ExecuteScalarTypedParams</name>
                    </method>
                    <method>
                        <signature>object(System.Data.SqlClient.SqlTransaction, string, System.Data.DataRow)</signature>
                        <name>ExecuteScalarTypedParams</name>
                    </method>
                    <method>
                        <signature>System.Xml.XmlReader(System.Data.SqlClient.SqlConnection, string, object[])</signature>
                        <name>ExecuteXmlReader</name>
                    </method>
                    <method>
                        <signature>System.Xml.XmlReader(System.Data.SqlClient.SqlConnection, System.Data.CommandType, string)</signature>
                        <name>ExecuteXmlReader</name>
                    </method>
                    <method>
                        <signature>System.Xml.XmlReader(System.Data.SqlClient.SqlConnection, System.Data.CommandType, string, System.Data.SqlClient.SqlParameter[])</signature>
                        <name>ExecuteXmlReader</name>
                    </method>
                    <method>
                        <signature>System.Xml.XmlReader(System.Data.SqlClient.SqlTransaction, string, object[])</signature>
                        <name>ExecuteXmlReader</name>
                    </method>
                    <method>
                        <signature>System.Xml.XmlReader(System.Data.SqlClient.SqlTransaction, System.Data.CommandType, string)</signature>
                        <name>ExecuteXmlReader</name>
                    </method>
                    <method>
                        <signature>System.Xml.XmlReader(System.Data.SqlClient.SqlTransaction, System.Data.CommandType, string, System.Data.SqlClient.SqlParameter[])</signature>
                        <name>ExecuteXmlReader</name>
                    </method>
                    <method>
                        <signature>System.Xml.XmlReader(System.Data.SqlClient.SqlConnection, string, System.Data.DataRow)</signature>
                        <name>ExecuteXmlReaderTypedParams</name>
                    </method>
                    <method>
                        <signature>System.Xml.XmlReader(System.Data.SqlClient.SqlTransaction, string, System.Data.DataRow)</signature>
                        <name>ExecuteXmlReaderTypedParams</name>
                    </method>
                    <method>
                        <signature>void(string, string, System.Data.DataSet, string[], object[])</signature>
                        <name>FillDataset</name>
                    </method>
                    <method>
                        <signature>void(string, System.Data.CommandType, string, System.Data.DataSet, string[])</signature>
                        <name>FillDataset</name>
                    </method>
                    <method>
                        <signature>void(string, System.Data.CommandType, string, System.Data.DataSet, string[], System.Data.SqlClient.SqlParameter[])</signature>
                        <name>FillDataset</name>
                    </method>
                    <method>
                        <signature>void(System.Data.SqlClient.SqlConnection, string, System.Data.DataSet, string[], object[])</signature>
                        <name>FillDataset</name>
                    </method>
                    <method>
                        <signature>void(System.Data.SqlClient.SqlConnection, System.Data.CommandType, string, System.Data.DataSet, string[])</signature>
                        <name>FillDataset</name>
                    </method>
                    <method>
                        <signature>void(System.Data.SqlClient.SqlConnection, System.Data.CommandType, string, System.Data.DataSet, string[], System.Data.SqlClient.SqlParameter[])</signature>
                        <name>FillDataset</name>
                    </method>
                    <method>
                        <signature>void(System.Data.SqlClient.SqlConnection, System.Data.SqlClient.SqlTransaction, System.Data.CommandType, string, System.Data.DataSet, string[], System.Data.SqlClient.SqlParameter[])</signature>
                        <name>FillDataset</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(System.Data.SqlClient.SqlTransaction, string, System.Data.DataSet, string[], object[])</signature>
                        <name>FillDataset</name>
                    </method>
                    <method>
                        <signature>void(System.Data.SqlClient.SqlTransaction, System.Data.CommandType, string, System.Data.DataSet, string[])</signature>
                        <name>FillDataset</name>
                    </method>
                    <method>
                        <signature>void(System.Data.SqlClient.SqlTransaction, System.Data.CommandType, string, System.Data.DataSet, string[], System.Data.SqlClient.SqlParameter[])</signature>
                        <name>FillDataset</name>
                    </method>
                    <method>
                        <signature>void(System.Data.SqlClient.SqlCommand, System.Data.SqlClient.SqlConnection, System.Data.SqlClient.SqlTransaction, System.Data.CommandType, string, System.Data.SqlClient.SqlParameter[], bool&amp;)</signature>
                        <name>PrepareCommand</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(System.Data.SqlClient.SqlCommand, System.Data.SqlClient.SqlCommand, System.Data.SqlClient.SqlCommand, System.Data.DataSet, string)</signature>
                        <name>UpdateDataset</name>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <name>Microsoft.ApplicationBlocks.Data.SqlHelper/SqlConnectionOwnership</name>
                <newname>Microsoft.ApplicationBlocks.Data.SqlHelper/a</newname>
                <methodlist />
                <fieldlist>
                    <field>
                        <signature>Microsoft.ApplicationBlocks.Data.SqlHelper/SqlConnectionOwnership</signature>
                        <name>External</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>Microsoft.ApplicationBlocks.Data.SqlHelper/SqlConnectionOwnership</signature>
                        <name>Internal</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>value__</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>Microsoft.ApplicationBlocks.Data.SqlHelperParameterCache</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.cctor</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(string, string, System.Data.SqlClient.SqlParameter[])</signature>
                        <name>CacheParameterSet</name>
                    </method>
                    <method>
                        <signature>System.Data.SqlClient.SqlParameter[](System.Data.SqlClient.SqlParameter[])</signature>
                        <name>CloneParameters</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>System.Data.SqlClient.SqlParameter[](System.Data.SqlClient.SqlConnection, string, bool)</signature>
                        <name>DiscoverSpParameterSet</name>
                        <newname>c</newname>
                    </method>
                    <method>
                        <signature>System.Data.SqlClient.SqlParameter[](string, string)</signature>
                        <name>GetCachedParameterSet</name>
                    </method>
                    <method>
                        <signature>System.Data.SqlClient.SqlParameter[](string, string)</signature>
                        <name>GetSpParameterSet</name>
                    </method>
                    <method>
                        <signature>System.Data.SqlClient.SqlParameter[](string, string, bool)</signature>
                        <name>GetSpParameterSet</name>
                    </method>
                    <method>
                        <signature>System.Data.SqlClient.SqlParameter[](System.Data.SqlClient.SqlConnection, string)</signature>
                        <name>GetSpParameterSet</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>System.Data.SqlClient.SqlParameter[](System.Data.SqlClient.SqlConnection, string, bool)</signature>
                        <name>GetSpParameterSet</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>System.Data.SqlClient.SqlParameter[](System.Data.SqlClient.SqlConnection, string, bool)</signature>
                        <name>GetSpParameterSetInternal</name>
                        <newname>a</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.Collections.Hashtable</signature>
                        <name>paramCache</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>PIC.Aop.ExceptionAttribute</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(PostSharp.Aspects.MethodExecutionArgs)</signature>
                        <name>OnException</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>PIC.Aop.MessageDelegate</signature>
                        <name>del</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>PIC.Aop.FuncDelegate</name>
                <methodlist>
                    <method>
                        <signature>void(object, native int)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>System.IAsyncResult(PostSharp.Aspects.MethodInterceptionArgs, System.AsyncCallback, object)</signature>
                        <name>BeginInvoke</name>
                    </method>
                    <method>
                        <signature>void(System.IAsyncResult)</signature>
                        <name>EndInvoke</name>
                    </method>
                    <method>
                        <signature>void(PostSharp.Aspects.MethodInterceptionArgs)</signature>
                        <name>Invoke</name>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <name>PIC.Aop.LogAttribute</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(PostSharp.Aspects.MethodExecutionArgs)</signature>
                        <name>OnEntry</name>
                    </method>
                    <method>
                        <signature>void(PostSharp.Aspects.MethodExecutionArgs)</signature>
                        <name>OnExit</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>PIC.Aop.MessageDelegate</signature>
                        <name>del</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>PIC.Aop.MessageDelegate</name>
                <methodlist>
                    <method>
                        <signature>void(object, native int)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>System.IAsyncResult(string, System.AsyncCallback, object)</signature>
                        <name>BeginInvoke</name>
                    </method>
                    <method>
                        <signature>void(System.IAsyncResult)</signature>
                        <name>EndInvoke</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>Invoke</name>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <name>PIC.Aop.PermissionAttribute</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(PostSharp.Aspects.MethodInterceptionArgs)</signature>
                        <name>OnInvoke</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>PIC.Aop.FuncDelegate</signature>
                        <name>del</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>PIC.BaseAttribute</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <name>PIC.CalcHelper</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>System.TimeSpan(System.DateTime, System.DateTime)</signature>
                        <name>DateDiff</name>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <name>PIC.CodeGeneratorBase</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(PIC.ICodeGenerator)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>Generate</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>PIC.ICodeGenerator</signature>
                        <name>innerGenerator</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>PIC.Common.Authentication.AuthElement</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(System.Xml.XmlDocument, System.Xml.XmlElement)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_AuthID</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_AuthPath</name>
                    </method>
                    <method>
                        <signature>System.Nullable`1&lt;int32&gt;()</signature>
                        <name>get_AuthType</name>
                    </method>
                    <method>
                        <signature>System.Nullable`1&lt;System.DateTime&gt;()</signature>
                        <name>get_CreateDate</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_Data</name>
                    </method>
                    <method>
                        <signature>System.Nullable`1&lt;System.DateTime&gt;()</signature>
                        <name>get_LastModifiedDate</name>
                    </method>
                    <method>
                        <signature>PIC.Common.Authentication.ModuleElement()</signature>
                        <name>get_Module</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_Name</name>
                    </method>
                    <method>
                        <signature>System.Nullable`1&lt;int32&gt;()</signature>
                        <name>get_SortIndex</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_AuthID</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_AuthPath</name>
                    </method>
                    <method>
                        <signature>void(System.Nullable`1&lt;int32&gt;)</signature>
                        <name>set_AuthType</name>
                    </method>
                    <method>
                        <signature>void(System.Nullable`1&lt;System.DateTime&gt;)</signature>
                        <name>set_CreateDate</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_Data</name>
                    </method>
                    <method>
                        <signature>void(System.Nullable`1&lt;System.DateTime&gt;)</signature>
                        <name>set_LastModifiedDate</name>
                    </method>
                    <method>
                        <signature>void(PIC.Common.Authentication.ModuleElement)</signature>
                        <name>set_Module</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_Name</name>
                    </method>
                    <method>
                        <signature>void(System.Nullable`1&lt;int32&gt;)</signature>
                        <name>set_SortIndex</name>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <name>PIC.Common.Authentication.AuthInfo</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(PIC.Data.DataCollection)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(System.Xml.XmlElement)</signature>
                        <name>.ctor</name>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <name>PIC.Common.Authentication.AuthPackage</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>PIC.Common.Authentication.LoginTypeEnum()</signature>
                        <name>get_AuthType</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_IP</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_LoginName</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_MAC</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_Password</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_PasswordEncrypted</name>
                    </method>
                    <method>
                        <signature>void(PIC.Common.Authentication.LoginTypeEnum)</signature>
                        <name>set_AuthType</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_IP</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_LoginName</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_MAC</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_Password</name>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>set_PasswordEncrypted</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>PIC.Common.Authentication.LoginTypeEnum</signature>
                        <name>&lt;AuthType&gt;k__BackingField</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>&lt;IP&gt;k__BackingField</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>&lt;LoginName&gt;k__BackingField</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>&lt;MAC&gt;k__BackingField</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>&lt;Password&gt;k__BackingField</name>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>&lt;PasswordEncrypted&gt;k__BackingField</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>PIC.Common.Authentication.AuthTypeEnum</name>
                <methodlist />
                <fieldlist>
                    <field>
                        <signature>PIC.Common.Authentication.AuthTypeEnum</signature>
                        <name>Application</name>
                    </field>
                    <field>
                        <signature>PIC.Common.Authentication.AuthTypeEnum</signature>
                        <name>FieldModify</name>
                    </field>
                    <field>
                        <signature>PIC.Common.Authentication.AuthTypeEnum</signature>
                        <name>FieldRead</name>
                    </field>
                    <field>
                        <signature>PIC.Common.Authentication.AuthTypeEnum</signature>
                        <name>Module</name>
                    </field>
                    <field>
                        <signature>PIC.Common.Authentication.AuthTypeEnum</signature>
                        <name>Other</name>
                    </field>
                    <field>
                        <signature>PIC.Common.Authentication.AuthTypeEnum</signature>
                        <name>Page</name>
                    </field>
                    <field>
                        <signature>PIC.Common.Authentication.AuthTypeEnum</signature>
                        <name>Portal</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>value__</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>PIC.Common.Authentication.GroupElement</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(System.Xml.XmlDocument, System.Xml.XmlElement)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>System.Nullable`1&lt;System.DateTime&gt;()</signature>
                        <name>get_CreateDate</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_GroupID</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_GroupPath</name>
                    </method>
                    <method>
                        <signature>System.Nullable`1&lt;int32&gt;()</signature>
                        <name>get_GroupType</name>
                    </method>
                    <method>
                        <signature>System.Nullable`1&lt;System.DateTime&gt;()</signature>
                        <name>get_LastModifiedDate</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_Name</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_ParentID</name>
                    </method>
                    <method>
                        <signature>System.Nullable`1&lt;int32&gt;()</signature>
                        <name>get_SortIndex</name>
                    </method>
                    <method>
                        <signature>System.Nullable`1&lt;unsigned int8&gt;()</signature>
                        <name>get_State</name>
                    </method>
                    <method>
                        <signature>void(System.Nullable`1&lt;System.DateTime&gt;)</signature>
                        <name>set_CreateDate</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_GroupID</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_GroupPath</name>
                    </method>
                    <method>
                        <signature>void(System.Nullable`1&lt;int32&gt;)</signature>
                        <name>set_GroupType</name>
                    </method>
                    <method>
                        <signature>void(System.Nullable`1&lt;System.DateTime&gt;)</signature>
                        <name>set_LastModifiedDate</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_Name</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_ParentID</name>
                    </method>
                    <method>
                        <signature>void(System.Nullable`1&lt;int32&gt;)</signature>
                        <name>set_SortIndex</name>
                    </method>
                    <method>
                        <signature>void(System.Nullable`1&lt;unsigned int8&gt;)</signature>
                        <name>set_State</name>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <name>PIC.Common.Authentication.GroupInfo</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(PIC.Data.DataCollection)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(System.Xml.XmlElement)</signature>
                        <name>.ctor</name>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <name>PIC.Common.Authentication.IAuthPackage</name>
                <methodlist>
                    <method>
                        <signature>PIC.Common.Authentication.LoginTypeEnum()</signature>
                        <name>get_AuthType</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_IP</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_LoginName</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_MAC</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_Password</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_PasswordEncrypted</name>
                    </method>
                    <method>
                        <signature>void(PIC.Common.Authentication.LoginTypeEnum)</signature>
                        <name>set_AuthType</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_IP</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_LoginName</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_MAC</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_Password</name>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>set_PasswordEncrypted</name>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <name>PIC.Common.Authentication.LoginTypeEnum</name>
                <methodlist />
                <fieldlist>
                    <field>
                        <signature>PIC.Common.Authentication.LoginTypeEnum</signature>
                        <name>PCClient</name>
                    </field>
                    <field>
                        <signature>PIC.Common.Authentication.LoginTypeEnum</signature>
                        <name>PCIE</name>
                    </field>
                    <field>
                        <signature>PIC.Common.Authentication.LoginTypeEnum</signature>
                        <name>Unknown</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>value__</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>PIC.Common.Authentication.ModuleElement</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(System.Xml.XmlDocument, System.Xml.XmlElement)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_ApplicationID</name>
                    </method>
                    <method>
                        <signature>System.Nullable`1&lt;System.DateTime&gt;()</signature>
                        <name>get_CreateDate</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_Description</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_Icon</name>
                    </method>
                    <method>
                        <signature>System.Nullable`1&lt;unsigned int8&gt;()</signature>
                        <name>get_IsSystem</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_Key</name>
                    </method>
                    <method>
                        <signature>System.Nullable`1&lt;System.DateTime&gt;()</signature>
                        <name>get_LastModifiedDate</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_ModuleID</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_ModulePath</name>
                    </method>
                    <method>
                        <signature>System.Nullable`1&lt;int32&gt;()</signature>
                        <name>get_ModuleType</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_Name</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_ParentID</name>
                    </method>
                    <method>
                        <signature>System.Nullable`1&lt;int32&gt;()</signature>
                        <name>get_PathLevel</name>
                    </method>
                    <method>
                        <signature>System.Nullable`1&lt;int32&gt;()</signature>
                        <name>get_SortIndex</name>
                    </method>
                    <method>
                        <signature>System.Nullable`1&lt;unsigned int8&gt;()</signature>
                        <name>get_State</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_Url</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_ApplicationID</name>
                    </method>
                    <method>
                        <signature>void(System.Nullable`1&lt;System.DateTime&gt;)</signature>
                        <name>set_CreateDate</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_Description</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_Icon</name>
                    </method>
                    <method>
                        <signature>void(System.Nullable`1&lt;unsigned int8&gt;)</signature>
                        <name>set_IsSystem</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_Key</name>
                    </method>
                    <method>
                        <signature>void(System.Nullable`1&lt;System.DateTime&gt;)</signature>
                        <name>set_LastModifiedDate</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_ModuleID</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_ModulePath</name>
                    </method>
                    <method>
                        <signature>void(System.Nullable`1&lt;int32&gt;)</signature>
                        <name>set_ModuleType</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_Name</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_ParentID</name>
                    </method>
                    <method>
                        <signature>void(System.Nullable`1&lt;int32&gt;)</signature>
                        <name>set_PathLevel</name>
                    </method>
                    <method>
                        <signature>void(System.Nullable`1&lt;int32&gt;)</signature>
                        <name>set_SortIndex</name>
                    </method>
                    <method>
                        <signature>void(System.Nullable`1&lt;unsigned int8&gt;)</signature>
                        <name>set_State</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_Url</name>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <name>PIC.Common.Authentication.RoleElement</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(System.Xml.XmlDocument, System.Xml.XmlElement)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>System.Nullable`1&lt;System.DateTime&gt;()</signature>
                        <name>get_CreateDate</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_Description</name>
                    </method>
                    <method>
                        <signature>System.Nullable`1&lt;System.DateTime&gt;()</signature>
                        <name>get_LastModifiedDate</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_Name</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_RoleID</name>
                    </method>
                    <method>
                        <signature>System.Nullable`1&lt;int32&gt;()</signature>
                        <name>get_SortIndex</name>
                    </method>
                    <method>
                        <signature>void(System.Nullable`1&lt;System.DateTime&gt;)</signature>
                        <name>set_CreateDate</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_Description</name>
                    </method>
                    <method>
                        <signature>void(System.Nullable`1&lt;System.DateTime&gt;)</signature>
                        <name>set_LastModifiedDate</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_Name</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_RoleID</name>
                    </method>
                    <method>
                        <signature>void(System.Nullable`1&lt;int32&gt;)</signature>
                        <name>set_SortIndex</name>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <name>PIC.Common.Authentication.RoleInfo</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(PIC.Data.DataCollection)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(System.Xml.XmlElement)</signature>
                        <name>.ctor</name>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <name>PIC.Common.Authentication.SysIdentity</name>
                <methodlist>
                    <method>
                        <signature>void(PIC.Common.UserInfo)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_AuthenticationType</name>
                    </method>
                    <method>
                        <signature>PIC.Common.Authentication.LoginTypeEnum()</signature>
                        <name>get_AuthType</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_IsAuthenticated</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_Name</name>
                    </method>
                    <method>
                        <signature>PIC.Common.UserInfo()</signature>
                        <name>get_UserInfo</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_UserSID</name>
                    </method>
                    <method>
                        <signature>void(PIC.Common.Authentication.LoginTypeEnum)</signature>
                        <name>set_AuthType</name>
                    </method>
                    <method>
                        <signature>void(PIC.Common.UserInfo)</signature>
                        <name>set_UserInfo</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>PIC.Common.Authentication.LoginTypeEnum</signature>
                        <name>&lt;AuthType&gt;k__BackingField</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>PIC.Common.UserInfo</signature>
                        <name>userInfo</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>PIC.Common.Authentication.SysPrincipal</name>
                <methodlist>
                    <method>
                        <signature>void(PIC.Common.Authentication.SysIdentity)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>System.Security.Principal.IIdentity()</signature>
                        <name>get_Identity</name>
                    </method>
                    <method>
                        <signature>bool(string)</signature>
                        <name>IsInRole</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>PIC.Common.Authentication.SysIdentity</signature>
                        <name>identity</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>PIC.Common.Authentication.UserInfoData</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>PIC.Common.Authentication.AuthInfo()</signature>
                        <name>get_AuthInfo</name>
                    </method>
                    <method>
                        <signature>System.Nullable`1&lt;System.DateTime&gt;()</signature>
                        <name>get_CreateDate</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_Email</name>
                    </method>
                    <method>
                        <signature>PIC.Common.Authentication.GroupInfo()</signature>
                        <name>get_GroupInfo</name>
                    </method>
                    <method>
                        <signature>System.Nullable`1&lt;System.DateTime&gt;()</signature>
                        <name>get_LastLogDate</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_LastLogIp</name>
                    </method>
                    <method>
                        <signature>System.Nullable`1&lt;System.DateTime&gt;()</signature>
                        <name>get_LastModifiedDate</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_LoginName</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_Name</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_Remark</name>
                    </method>
                    <method>
                        <signature>PIC.Common.Authentication.RoleInfo()</signature>
                        <name>get_RoleInfo</name>
                    </method>
                    <method>
                        <signature>System.Nullable`1&lt;int32&gt;()</signature>
                        <name>get_SortIndex</name>
                    </method>
                    <method>
                        <signature>System.Nullable`1&lt;unsigned int8&gt;()</signature>
                        <name>get_State</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_UserID</name>
                    </method>
                    <method>
                        <signature>void(PIC.Common.Authentication.AuthInfo)</signature>
                        <name>set_AuthInfo</name>
                    </method>
                    <method>
                        <signature>void(System.Nullable`1&lt;System.DateTime&gt;)</signature>
                        <name>set_CreateDate</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_Email</name>
                    </method>
                    <method>
                        <signature>void(PIC.Common.Authentication.GroupInfo)</signature>
                        <name>set_GroupInfo</name>
                    </method>
                    <method>
                        <signature>void(System.Nullable`1&lt;System.DateTime&gt;)</signature>
                        <name>set_LastLogDate</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_LastLogIp</name>
                    </method>
                    <method>
                        <signature>void(System.Nullable`1&lt;System.DateTime&gt;)</signature>
                        <name>set_LastModifiedDate</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_LoginName</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_Name</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_Remark</name>
                    </method>
                    <method>
                        <signature>void(PIC.Common.Authentication.RoleInfo)</signature>
                        <name>set_RoleInfo</name>
                    </method>
                    <method>
                        <signature>void(System.Nullable`1&lt;int32&gt;)</signature>
                        <name>set_SortIndex</name>
                    </method>
                    <method>
                        <signature>void(System.Nullable`1&lt;unsigned int8&gt;)</signature>
                        <name>set_State</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_UserID</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>PIC.Common.Authentication.AuthInfo</signature>
                        <name>_authInfo</name>
                        <newname>l</newname>
                    </field>
                    <field>
                        <signature>System.Nullable`1&lt;System.DateTime&gt;</signature>
                        <name>_createDate</name>
                        <newname>k</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>_email</name>
                        <newname>d</newname>
                    </field>
                    <field>
                        <signature>PIC.Common.Authentication.GroupInfo</signature>
                        <name>_groupInfo</name>
                        <newname>m</newname>
                    </field>
                    <field>
                        <signature>System.Nullable`1&lt;System.DateTime&gt;</signature>
                        <name>_lastLogDate</name>
                        <newname>h</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>_lastLogIp</name>
                        <newname>g</newname>
                    </field>
                    <field>
                        <signature>System.Nullable`1&lt;System.DateTime&gt;</signature>
                        <name>_lastModifiedDate</name>
                        <newname>j</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>_loginName</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>_name</name>
                        <newname>c</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>_remark</name>
                        <newname>e</newname>
                    </field>
                    <field>
                        <signature>PIC.Common.Authentication.RoleInfo</signature>
                        <name>_roleInfo</name>
                        <newname>n</newname>
                    </field>
                    <field>
                        <signature>System.Nullable`1&lt;int32&gt;</signature>
                        <name>_sortIndex</name>
                        <newname>i</newname>
                    </field>
                    <field>
                        <signature>System.Nullable`1&lt;unsigned int8&gt;</signature>
                        <name>_State</name>
                        <newname>f</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>_userid</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>PIC.Common.Authentication.UserStateEnum</name>
                <methodlist />
                <fieldlist>
                    <field>
                        <signature>PIC.Common.Authentication.UserStateEnum</signature>
                        <name>Login</name>
                    </field>
                    <field>
                        <signature>PIC.Common.Authentication.UserStateEnum</signature>
                        <name>Logoff</name>
                    </field>
                    <field>
                        <signature>PIC.Common.Authentication.UserStateEnum</signature>
                        <name>Offline</name>
                    </field>
                    <field>
                        <signature>PIC.Common.Authentication.UserStateEnum</signature>
                        <name>Online</name>
                    </field>
                    <field>
                        <signature>PIC.Common.Authentication.UserStateEnum</signature>
                        <name>Unknown</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>value__</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>PIC.Common.Cache</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>object(string)</signature>
                        <name>Get</name>
                    </method>
                    <method>
                        <signature>PIC.Common.Cache()</signature>
                        <name>GetInstance</name>
                    </method>
                    <method>
                        <signature>string(string)</signature>
                        <name>PreparePath</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>Remove</name>
                    </method>
                    <method>
                        <signature>void(string, object)</signature>
                        <name>Set</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>PIC.Common.Cache</signature>
                        <name>cache</name>
                    </field>
                    <field>
                        <signature>PIC.Common.ICacheProvider</signature>
                        <name>cs</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>PIC.Common.CacheEventArgs</name>
                <methodlist>
                    <method>
                        <signature>void(string, object)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>object()</signature>
                        <name>get_Object</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_Xpath</name>
                    </method>
                    <method>
                        <signature>void(object)</signature>
                        <name>set_Object</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_Xpath</name>
                        <newname>a</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>object</signature>
                        <name>&lt;Object&gt;k__BackingField</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>&lt;Xpath&gt;k__BackingField</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>PIC.Common.CacheException</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>.ctor</name>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <name>PIC.Common.CacheV1</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(string, object)</signature>
                        <name>Add</name>
                    </method>
                    <method>
                        <signature>System.Xml.XmlNode(string)</signature>
                        <name>CreateNode</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>object(string)</signature>
                        <name>Get</name>
                    </method>
                    <method>
                        <signature>PIC.Common.CacheV1()</signature>
                        <name>GetInstance</name>
                    </method>
                    <method>
                        <signature>object[](string)</signature>
                        <name>GetList</name>
                    </method>
                    <method>
                        <signature>string(string)</signature>
                        <name>PrepareXpath</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>Remove</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>PIC.Common.CacheV1</signature>
                        <name>cache</name>
                    </field>
                    <field>
                        <signature>PIC.Common.ICacheProvider</signature>
                        <name>cs</name>
                    </field>
                    <field>
                        <signature>System.Xml.XmlElement</signature>
                        <name>objectXmlMap</name>
                    </field>
                    <field>
                        <signature>System.Xml.XmlDocument</signature>
                        <name>rootXml</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>PIC.Common.CommonDataHelper</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>PIC.Data.DataCollection(System.Data.DataTable)</signature>
                        <name>DataTableToDataCollection</name>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <name>PIC.Common.Configuration.BaseConfiguration</name>
                <methodlist>
                    <method>
                        <signature>void(System.Xml.XmlNode)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>object(string, object[])</signature>
                        <name>CreateObjectByAttribute</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_Name</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>Reload</name>
                    </method>
                    <method>
                        <signature>string(string, string)</signature>
                        <name>RetrieveAttributeSetting</name>
                    </method>
                    <method>
                        <signature>PIC.EasyDictionary(string)</signature>
                        <name>RetrieveAttributeSettings</name>
                    </method>
                    <method>
                        <signature>PIC.EasyDictionary(string)</signature>
                        <name>RetrieveNodeSettings</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.Xml.XmlNode</signature>
                        <name>configurationData</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>m_name</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>PIC.Common.Configuration.BaseConfigurationManager</name>
                <methodlist>
                    <method>
                        <signature>void(System.Xml.XmlNode)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.Dictionary`2&lt;System.Type,PIC.Common.Configuration.IConfiguration&gt;()</signature>
                        <name>get_Configurations</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.Xml.XmlNode</signature>
                        <name>configurationData</name>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.Dictionary`2&lt;System.Type,PIC.Common.Configuration.IConfiguration&gt;</signature>
                        <name>configurations</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>PIC.Common.Configuration.CacheConfiguration</name>
                <methodlist>
                    <method>
                        <signature>void(System.Xml.XmlNode)</signature>
                        <name>.ctor</name>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <name>PIC.Common.Configuration.ConfigurationHandler</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>object(object, object, System.Xml.XmlNode)</signature>
                        <name>Create</name>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <name>PIC.Common.Configuration.ExceptionConfiguration</name>
                <methodlist>
                    <method>
                        <signature>void(System.Xml.XmlNode)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_ExceptionPolicy</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>string</signature>
                        <name>m_exceptionPolicy</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>PIC.Common.Configuration.IConfiguration</name>
                <methodlist>
                    <method>
                        <signature>string()</signature>
                        <name>get_Name</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>Reload</name>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <name>PIC.Common.Configuration.IConfigurationManager</name>
                <methodlist>
                    <method>
                        <signature>System.Collections.Generic.Dictionary`2&lt;System.Type,PIC.Common.Configuration.IConfiguration&gt;()</signature>
                        <name>get_Configurations</name>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <name>PIC.Common.Configuration.ServiceConfiguration</name>
                <methodlist>
                    <method>
                        <signature>void(System.Xml.XmlNode)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_CommonServicePath</name>
                    </method>
                    <method>
                        <signature>PIC.EasyDictionary()</signature>
                        <name>get_UserSession</name>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <name>PIC.Common.Configuration.SystemConfiguration</name>
                <methodlist>
                    <method>
                        <signature>void(System.Xml.XmlNode)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.Dictionary`2&lt;string,string&gt;()</signature>
                        <name>get_AppSettings</name>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.Dictionary`2&lt;string,PIC.Common.Configuration.IConfigurationManager&gt;()</signature>
                        <name>get_ConfigurationManagers</name>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.Dictionary`2&lt;string,PIC.Common.Configuration.IConfiguration&gt;()</signature>
                        <name>get_Configurations</name>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.Dictionary`2&lt;string,string&gt;()</signature>
                        <name>get_ConnectionStrings</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>Initialize</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>InitializeConfigurationsInfo</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>Reload</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.Collections.Generic.Dictionary`2&lt;string,string&gt;</signature>
                        <name>m_appSettings</name>
                        <newname>d</newname>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.Dictionary`2&lt;string,PIC.Common.Configuration.IConfigurationManager&gt;</signature>
                        <name>m_configurationManagers</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.Dictionary`2&lt;string,PIC.Common.Configuration.IConfiguration&gt;</signature>
                        <name>m_configurations</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.Dictionary`2&lt;string,string&gt;</signature>
                        <name>m_connectionStrings</name>
                        <newname>c</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>PIC.Common.Configuration.ThirdPartyConfiguration</name>
                <methodlist>
                    <method>
                        <signature>void(System.Xml.XmlNode)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>System.Xml.XmlNodeList()</signature>
                        <name>get_ThirdPartyNodes</name>
                    </method>
                    <method>
                        <signature>System.Xml.XmlNode(string)</signature>
                        <name>GetConfig</name>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <name>PIC.Common.DefaultCacheProvider</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>object(string)</signature>
                        <name>Get</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>Remove</name>
                    </method>
                    <method>
                        <signature>void(string, object)</signature>
                        <name>Set</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.Collections.Hashtable</signature>
                        <name>objectTable</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>PIC.Common.ExpFileTypeEnum</name>
                <methodlist />
                <fieldlist>
                    <field>
                        <signature>PIC.Common.ExpFileTypeEnum</signature>
                        <name>Excel</name>
                    </field>
                    <field>
                        <signature>PIC.Common.ExpFileTypeEnum</signature>
                        <name>Unknown</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>value__</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>PIC.Common.ICacheProvider</name>
                <methodlist>
                    <method>
                        <signature>object(string)</signature>
                        <name>Get</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>Remove</name>
                    </method>
                    <method>
                        <signature>void(string, object)</signature>
                        <name>Set</name>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <name>PIC.Common.IdFactory</name>
                <methodlist>
                    <method>
                        <signature>string()</signature>
                        <name>GenerateID</name>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <name>PIC.Common.PICConfigurationManager</name>
                <methodlist>
                    <method>
                        <signature>void(System.Xml.XmlNode)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>string(System.Xml.XmlNode)</signature>
                        <name>DecryptConfig</name>
                    </method>
                    <method>
                        <signature>string(System.Xml.XmlNode, string)</signature>
                        <name>DecryptConfig</name>
                    </method>
                    <method>
                        <signature>string(System.Xml.XmlNode, string)</signature>
                        <name>EncryptConfig</name>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.Dictionary`2&lt;string,string&gt;()</signature>
                        <name>get_AppSettings</name>
                    </method>
                    <method>
                        <signature>PIC.Common.Configuration.CacheConfiguration()</signature>
                        <name>get_CacheConfiguration</name>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.Dictionary`2&lt;string,string&gt;()</signature>
                        <name>get_ConnectionStrings</name>
                    </method>
                    <method>
                        <signature>PIC.Common.Configuration.ExceptionConfiguration()</signature>
                        <name>get_ExceptionConfiguration</name>
                    </method>
                    <method>
                        <signature>PIC.Common.PICConfigurationManager()</signature>
                        <name>get_Instance</name>
                    </method>
                    <method>
                        <signature>PIC.Common.Configuration.ServiceConfiguration()</signature>
                        <name>get_ServicesConfiguration</name>
                    </method>
                    <method>
                        <signature>PIC.Common.Configuration.SystemConfiguration()</signature>
                        <name>get_SystemConfiguration</name>
                    </method>
                    <method>
                        <signature>PIC.Common.Configuration.ThirdPartyConfiguration()</signature>
                        <name>get_ThirdPartiesConfiguration</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>Initialize</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>bool(System.Xml.XmlNode)</signature>
                        <name>IsProtectedConfig</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>Reload</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>ReloadConfiguration</name>
                        <newname>a</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>PIC.Common.PICConfigurationManager</signature>
                        <name>_instance</name>
                        <newname>f</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>CacheSectionName</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>ExceptionSectionName</name>
                    </field>
                    <field>
                        <signature>PIC.Common.Configuration.CacheConfiguration</signature>
                        <name>m_cacheConfiguration</name>
                        <newname>d</newname>
                    </field>
                    <field>
                        <signature>PIC.Common.Configuration.ExceptionConfiguration</signature>
                        <name>m_exceptionConfiguration</name>
                        <newname>e</newname>
                    </field>
                    <field>
                        <signature>PIC.Common.Configuration.ServiceConfiguration</signature>
                        <name>m_servicesConfiguration</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>PIC.Common.Configuration.SystemConfiguration</signature>
                        <name>m_systemConfiguration</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>PIC.Common.Configuration.ThirdPartyConfiguration</signature>
                        <name>m_thirdPartiesConfiguration</name>
                        <newname>c</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>ServicesSectionName</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>SourceSectionName</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>SysSectionPath</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>ThirdPartiesSectionName</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>TopSectionName</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>PIC.Common.SecurityHelper</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>bool(native int, int32, native int&amp;)</signature>
                        <name>DuplicateToken</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>GetLastError</name>
                    </method>
                    <method>
                        <signature>bool(string, string, string, int32, int32, native int&amp;)</signature>
                        <name>LogonUser</name>
                    </method>
                    <method>
                        <signature>System.Security.Principal.WindowsIdentity(string, string, string)</signature>
                        <name>LogonUser</name>
                    </method>
                    <method>
                        <signature>void(string, string, string)</signature>
                        <name>Switch</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>UndoSwitch</name>
                    </method>
                    <method>
                        <signature>void(string, string, string)</signature>
                        <name>ValidateUser</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.Security.Principal.WindowsImpersonationContext</signature>
                        <name>impersonationContext</name>
                        <newname>d</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>LOGON32_LOGON_INTERACTIVE</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>LOGON32_PROVIDER_DEFAULT</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>SecurityImpersonation</name>
                        <newname>c</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>PIC.Common.Service.AuthMessage</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(string, string, string, string, PIC.Common.Authentication.LoginTypeEnum)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>PIC.Common.Authentication.LoginTypeEnum()</signature>
                        <name>get_AuthType</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_IP</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_LoginName</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_MAC</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_Password</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_PasswordEncrypted</name>
                    </method>
                    <method>
                        <signature>void(PIC.Common.Authentication.LoginTypeEnum)</signature>
                        <name>set_AuthType</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_IP</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_LoginName</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_MAC</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_Password</name>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>set_PasswordEncrypted</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>SetAuthType</name>
                        <newname>a</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>PIC.Common.Authentication.LoginTypeEnum</signature>
                        <name>authType</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>PIC.Common.Service.IWCFService</name>
                <methodlist>
                    <method>
                        <signature>unsigned int8[](string)</signature>
                        <name>ExecuteService</name>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <name>PIC.Common.Service.OpMessage</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(string, string)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>PIC.Common.Service.OpParameter(string)</signature>
                        <name>get_Item</name>
                    </method>
                    <method>
                        <signature>PIC.Common.Service.OpParameter(string, PIC.Common.Service.OpParameter)</signature>
                        <name>get_Item</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_Operation</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_SessionID</name>
                    </method>
                    <method>
                        <signature>void(string, PIC.Common.Service.OpParameter)</signature>
                        <name>set_Item</name>
                    </method>
                    <method>
                        <signature>void(string, PIC.Common.Service.OpParameter, PIC.Common.Service.OpParameter)</signature>
                        <name>set_Item</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_Operation</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_SessionID</name>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <name>PIC.Common.Service.OpParameter</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(PIC.Common.Service.OpParameter)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(PIC.Data.DataParameter)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(string, System.TypeCode, object)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(System.Xml.XmlElement)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_Name</name>
                    </method>
                    <method>
                        <signature>System.TypeCode()</signature>
                        <name>get_Type</name>
                    </method>
                    <method>
                        <signature>object()</signature>
                        <name>get_Value</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_Name</name>
                    </method>
                    <method>
                        <signature>void(System.TypeCode)</signature>
                        <name>set_Type</name>
                    </method>
                    <method>
                        <signature>void(object)</signature>
                        <name>set_Value</name>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <name>PIC.Common.Service.OpParameterCollection</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(PIC.Common.Service.OpParameterCollection)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(PIC.Data.DataCollection)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(System.Xml.XmlElement)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>PIC.Common.Service.OpParameter(string)</signature>
                        <name>GetParameter</name>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <name>PIC.Common.ServiceHelper</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <arity>1</arity>
                        <signature>!!0(string)</signature>
                        <name>DeserializeFromBase64</name>
                    </method>
                    <method>
                        <signature>object(string)</signature>
                        <name>DeserializeFromBase64</name>
                    </method>
                    <method>
                        <arity>1</arity>
                        <signature>!!0(unsigned int8[])</signature>
                        <name>DeserializeFromBytes</name>
                    </method>
                    <method>
                        <signature>object(unsigned int8[])</signature>
                        <name>DeserializeFromBytes</name>
                    </method>
                    <method>
                        <signature>string(object)</signature>
                        <name>SerializeToBase64</name>
                    </method>
                    <method>
                        <signature>unsigned int8[](object)</signature>
                        <name>SerializeToBytes</name>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <name>PIC.Common.ServiceHelper/UBinder</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>System.Type(string, string)</signature>
                        <name>BindToType</name>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <name>PIC.Common.UserInfo</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.Dictionary`2&lt;string,string&gt;()</signature>
                        <name>get_ExtData</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_IP</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_IsAdmin</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_LoginName</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_MAC</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_Name</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_SessionID</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_UserID</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_IP</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_MAC</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.Collections.Generic.Dictionary`2&lt;string,string&gt;</signature>
                        <name>_tag</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>&lt;IP&gt;k__BackingField</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>&lt;MAC&gt;k__BackingField</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>PIC.Common.WebHelper</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(string, string, PIC.Common.ExpFileTypeEnum)</signature>
                        <name>ExportExtGrid</name>
                    </method>
                    <method>
                        <signature>void(string, string)</signature>
                        <name>ExportExtGridToExcel</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>GetApplicationBaseName</name>
                    </method>
                    <method>
                        <signature>System.Web.HttpResponse(string)</signature>
                        <name>GetAttachmentResponse</name>
                    </method>
                    <method>
                        <signature>System.Web.HttpResponse(System.Web.HttpResponse, string)</signature>
                        <name>GetAttachmentResponse</name>
                    </method>
                    <method>
                        <signature>System.Web.HttpResponse(System.Web.HttpResponse, string, System.Text.Encoding)</signature>
                        <name>GetAttachmentResponse</name>
                    </method>
                    <method>
                        <signature>PIC.Common.Authentication.AuthPackage(string, string, bool)</signature>
                        <name>GetAuthPackage</name>
                    </method>
                    <method>
                        <signature>PIC.Common.Authentication.SysIdentity(System.Security.Principal.IPrincipal)</signature>
                        <name>GetSysIdentity</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>IsOuterLink</name>
                    </method>
                    <method>
                        <signature>System.Web.HttpResponse(string, string)</signature>
                        <name>ResponseFile</name>
                    </method>
                    <method>
                        <signature>System.Web.HttpResponse(System.IO.FileInfo)</signature>
                        <name>ResponseFile</name>
                    </method>
                    <method>
                        <signature>System.Web.HttpResponse(System.IO.Stream, string)</signature>
                        <name>ResponseFile</name>
                    </method>
                    <method>
                        <signature>System.Web.HttpResponse(unsigned int8[], string)</signature>
                        <name>ResponseFile</name>
                    </method>
                    <method>
                        <signature>System.Web.HttpResponse(string, string)</signature>
                        <name>ResponseTextFile</name>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <name>PIC.Common.WebHelper/ExtTreeNode</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>System.Nullable`1&lt;bool&gt;()</signature>
                        <name>get_leaf</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_text</name>
                    </method>
                    <method>
                        <signature>void(System.Nullable`1&lt;bool&gt;)</signature>
                        <name>set_leaf</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_text</name>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <name>PIC.Common.WebHelper/ExtTreeNodeCollection</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(int32)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(System.Collections.Generic.IEnumerable`1&lt;PIC.Common.WebHelper/ExtTreeNode&gt;)</signature>
                        <name>.ctor</name>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <name>PIC.ContantValue</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>string</signature>
                        <name>PIC_CATEGORY</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>PIC_CATEGORY_WORKFLOW</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>PIC_MEF_EXPORT</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>PIC_MEF_EXPORT_KEY</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>PIC.Data.ActiveRecordTransactionAttribute</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(Castle.ActiveRecord.TransactionMode)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(Castle.ActiveRecord.TransactionMode, System.Data.IsolationLevel)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(Castle.ActiveRecord.TransactionMode, System.Data.IsolationLevel, Castle.ActiveRecord.OnDispose)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(System.Data.IsolationLevel)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>System.Data.IsolationLevel()</signature>
                        <name>get_IsolationLevel</name>
                    </method>
                    <method>
                        <signature>Castle.ActiveRecord.OnDispose()</signature>
                        <name>get_OnDisposeBehavior</name>
                    </method>
                    <method>
                        <signature>Castle.ActiveRecord.TransactionMode()</signature>
                        <name>get_TransactionMode</name>
                    </method>
                    <method>
                        <signature>void(PostSharp.Aspects.MethodExecutionArgs)</signature>
                        <name>OnEntry</name>
                    </method>
                    <method>
                        <signature>void(PostSharp.Aspects.MethodExecutionArgs)</signature>
                        <name>OnException</name>
                    </method>
                    <method>
                        <signature>void(PostSharp.Aspects.MethodExecutionArgs)</signature>
                        <name>OnExit</name>
                    </method>
                    <method>
                        <signature>void(PostSharp.Aspects.MethodExecutionArgs)</signature>
                        <name>OnSuccess</name>
                    </method>
                    <method>
                        <signature>void(System.Data.IsolationLevel)</signature>
                        <name>set_IsolationLevel</name>
                    </method>
                    <method>
                        <signature>void(Castle.ActiveRecord.OnDispose)</signature>
                        <name>set_OnDisposeBehavior</name>
                    </method>
                    <method>
                        <signature>void(Castle.ActiveRecord.TransactionMode)</signature>
                        <name>set_TransactionMode</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.Data.IsolationLevel</signature>
                        <name>isolationLevel</name>
                    </field>
                    <field>
                        <signature>Castle.ActiveRecord.OnDispose</signature>
                        <name>onDisposeBehavior</name>
                    </field>
                    <field>
                        <signature>Castle.ActiveRecord.TransactionMode</signature>
                        <name>transactionMode</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>PIC.Data.CommonSearchCriterionItem</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(PIC.Data.CommonSearchCriterionItem)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(string, object)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(string, object, PIC.Data.SearchModeEnum)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(string, object, PIC.Data.SearchModeEnum, System.TypeCode)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(string, object, System.TypeCode)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(string, PIC.Data.SingleSearchModeEnum)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_IsSingleSearch</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_PropertyName</name>
                    </method>
                    <method>
                        <signature>PIC.Data.SearchModeEnum()</signature>
                        <name>get_SearchMode</name>
                    </method>
                    <method>
                        <signature>PIC.Data.SingleSearchModeEnum()</signature>
                        <name>get_SingleSearchMode</name>
                    </method>
                    <method>
                        <signature>System.TypeCode()</signature>
                        <name>get_Type</name>
                    </method>
                    <method>
                        <signature>object()</signature>
                        <name>get_Value</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>Init</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_PropertyName</name>
                    </method>
                    <method>
                        <signature>void(PIC.Data.SearchModeEnum)</signature>
                        <name>set_SearchMode</name>
                    </method>
                    <method>
                        <signature>void(PIC.Data.SingleSearchModeEnum)</signature>
                        <name>set_SingleSearchMode</name>
                    </method>
                    <method>
                        <signature>void(System.TypeCode)</signature>
                        <name>set_Type</name>
                    </method>
                    <method>
                        <signature>void(object)</signature>
                        <name>set_Value</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>ToSQLString</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>string</signature>
                        <name>&lt;PropertyName&gt;k__BackingField</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>PIC.Data.SearchModeEnum</signature>
                        <name>&lt;SearchMode&gt;k__BackingField</name>
                        <newname>d</newname>
                    </field>
                    <field>
                        <signature>PIC.Data.SingleSearchModeEnum</signature>
                        <name>&lt;SingleSearchMode&gt;k__BackingField</name>
                        <newname>e</newname>
                    </field>
                    <field>
                        <signature>System.TypeCode</signature>
                        <name>&lt;Type&gt;k__BackingField</name>
                        <newname>c</newname>
                    </field>
                    <field>
                        <signature>object</signature>
                        <name>&lt;Value&gt;k__BackingField</name>
                        <newname>b</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>PIC.Data.Comparer</name>
                <methodlist>
                    <method>
                        <signature>void(string, bool)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>int32(object, object)</signature>
                        <name>Compare</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>string</signature>
                        <name>columnName</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>isAsc</name>
                        <newname>b</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>PIC.Data.CriterionItem</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>ToSQLString</name>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <name>PIC.Data.DataCollection</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(PIC.Data.DataCollection)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(System.Xml.XmlDocument, System.Xml.XmlElement)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(System.Xml.XmlElement)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>PIC.Data.DataCollection(bool)</signature>
                        <name>Clone</name>
                    </method>
                    <method>
                        <signature>PIC.Data.DataCollection(string)</signature>
                        <name>Clone</name>
                    </method>
                    <method>
                        <signature>PIC.Data.DataElement(string)</signature>
                        <name>GetElementById</name>
                    </method>
                    <method>
                        <signature>string(int32, string)</signature>
                        <name>GetValue</name>
                    </method>
                    <method>
                        <signature>PIC.Data.DataElement()</signature>
                        <name>NewElement</name>
                    </method>
                    <method>
                        <signature>void(int32, string, string)</signature>
                        <name>SetValue</name>
                    </method>
                    <method>
                        <signature>void(string, bool)</signature>
                        <name>Sort</name>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <name>PIC.Data.DataContainer</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(PIC.Data.DataContainer)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(string, string)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(System.Xml.XmlElement)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(PIC.Data.DataNode)</signature>
                        <name>Add</name>
                    </method>
                    <method>
                        <signature>void(PIC.Data.DataNode, string)</signature>
                        <name>Add</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>Clear</name>
                    </method>
                    <method>
                        <signature>void(PIC.Data.DataNodeType)</signature>
                        <name>Clear</name>
                    </method>
                    <method>
                        <signature>PIC.Data.DataContainer(bool)</signature>
                        <name>Clone</name>
                    </method>
                    <method>
                        <signature>PIC.Data.DataCollection(int32)</signature>
                        <name>Collections</name>
                    </method>
                    <method>
                        <signature>PIC.Data.DataCollection(string)</signature>
                        <name>Collections</name>
                    </method>
                    <method>
                        <signature>PIC.Data.DataNode(PIC.Data.DataNodeType, int32)</signature>
                        <name>Get</name>
                    </method>
                    <method>
                        <signature>PIC.Data.DataNode(PIC.Data.DataNodeType, string)</signature>
                        <name>Get</name>
                    </method>
                    <method>
                        <signature>string(string)</signature>
                        <name>get_Item</name>
                    </method>
                    <method>
                        <signature>string(string, string)</signature>
                        <name>get_Item</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>GetCount</name>
                    </method>
                    <method>
                        <signature>int32(PIC.Data.DataNodeType)</signature>
                        <name>GetNodeCount</name>
                    </method>
                    <method>
                        <signature>int32(string)</signature>
                        <name>GetNodeCount</name>
                    </method>
                    <method>
                        <signature>string(PIC.Data.DataNodeType)</signature>
                        <name>GetTag</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>string(PIC.Data.DataNodeType, bool)</signature>
                        <name>GetTag</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>System.Xml.XmlNode(PIC.Data.DataNodeType, int32)</signature>
                        <name>GetXmlNode</name>
                    </method>
                    <method>
                        <signature>System.Xml.XmlNode(PIC.Data.DataNodeType, string)</signature>
                        <name>GetXmlNode</name>
                    </method>
                    <method>
                        <signature>PIC.Data.DataNode(PIC.Data.DataNodeType)</signature>
                        <name>New</name>
                    </method>
                    <method>
                        <signature>PIC.Data.DataParameter(int32)</signature>
                        <name>Parameters</name>
                    </method>
                    <method>
                        <signature>PIC.Data.DataParameter(string)</signature>
                        <name>Parameters</name>
                    </method>
                    <method>
                        <signature>void(PIC.Data.DataNode)</signature>
                        <name>Remove</name>
                    </method>
                    <method>
                        <signature>void(PIC.Data.DataNodeType, int32)</signature>
                        <name>Remove</name>
                    </method>
                    <method>
                        <signature>void(PIC.Data.DataNodeType, string)</signature>
                        <name>Remove</name>
                    </method>
                    <method>
                        <signature>void(string, string)</signature>
                        <name>set_Item</name>
                    </method>
                    <method>
                        <signature>void(string, string, string)</signature>
                        <name>set_Item</name>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <name>PIC.Data.DataElement</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(System.Xml.XmlDocument, System.Xml.XmlElement)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>PIC.Data.DataElement(bool)</signature>
                        <name>Clone</name>
                    </method>
                    <method>
                        <signature>string(int32)</signature>
                        <name>GetAttr</name>
                    </method>
                    <method>
                        <signature>string(string)</signature>
                        <name>GetAttr</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>GetAttrCount</name>
                    </method>
                    <method>
                        <signature>string(int32)</signature>
                        <name>GetAttrName</name>
                    </method>
                    <method>
                        <signature>PIC.Data.DataContainer()</signature>
                        <name>GetDataContainer</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>GetName</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>GetValue</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>GetXmlValue</name>
                    </method>
                    <method>
                        <signature>void(int32)</signature>
                        <name>RemoveAttr</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>RemoveAttr</name>
                    </method>
                    <method>
                        <signature>void(int32, string)</signature>
                        <name>SetAttr</name>
                    </method>
                    <method>
                        <signature>void(string, string)</signature>
                        <name>SetAttr</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>SetValue</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>SetXmlValue</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>ToString</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>PIC.Data.DataNodeType</signature>
                        <name>Type</name>
                    </field>
                    <field>
                        <signature>System.Xml.XmlDocument</signature>
                        <name>XmlDoc</name>
                    </field>
                    <field>
                        <signature>System.Xml.XmlElement</signature>
                        <name>XmlEle</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>PIC.Data.DataEnum</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <name>PIC.Data.DataEnumEx</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(PIC.Data.DataEnum)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(System.Collections.Generic.Dictionary`2&lt;string,string&gt;)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(System.Collections.Generic.IList`1&lt;PIC.Data.DataEnumItem`1&lt;string&gt;&gt;)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(System.Collections.Generic.IList`1&lt;PIC.Data.DataEnumItem&gt;)</signature>
                        <name>.ctor</name>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <arity>1</arity>
                <genericparameter sequence="0">
                    <name>T</name>
                </genericparameter>
                <name>PIC.Data.DataEnumEx`1</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(System.Collections.Generic.Dictionary`2&lt;!0,string&gt;)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(System.Collections.Generic.IList`1&lt;PIC.Data.DataEnumItem`1&lt;!0&gt;&gt;)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>string(PIC.Data.DataEnumItem`1&lt;!0&gt;)</signature>
                        <name>&lt;GetTag&gt;b__4</name>
                        <newname>c</newname>
                    </method>
                    <method>
                        <signature>string(PIC.Data.DataEnumItem`1&lt;!0&gt;)</signature>
                        <name>&lt;GetText&gt;b__9</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>!0(PIC.Data.DataEnumItem`1&lt;!0&gt;)</signature>
                        <name>&lt;GetValueByText&gt;b__11</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>bool(!0, object)</signature>
                        <name>Add</name>
                    </method>
                    <method>
                        <signature>bool(!0, string)</signature>
                        <name>Add</name>
                    </method>
                    <method>
                        <signature>bool(!0, string, object)</signature>
                        <name>Add</name>
                    </method>
                    <method>
                        <signature>void(PIC.Data.DataEnumItem`1&lt;!0&gt;)</signature>
                        <name>Add</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>Clear</name>
                    </method>
                    <method>
                        <signature>bool(PIC.Data.DataEnumItem`1&lt;!0&gt;)</signature>
                        <name>Contains</name>
                    </method>
                    <method>
                        <signature>void(PIC.Data.DataEnumItem`1&lt;!0&gt;[], int32)</signature>
                        <name>CopyTo</name>
                    </method>
                    <method>
                        <signature>bool(!0)</signature>
                        <name>Exists</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_Count</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_IsReadOnly</name>
                    </method>
                    <method>
                        <signature>PIC.Data.DataEnumItem`1&lt;!0&gt;(!0)</signature>
                        <name>get_Item</name>
                    </method>
                    <method>
                        <signature>PIC.Data.DataEnumItem`1&lt;!0&gt;(int32)</signature>
                        <name>get_Item</name>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.IEnumerator`1&lt;PIC.Data.DataEnumItem`1&lt;!0&gt;&gt;()</signature>
                        <name>GetEnumerator</name>
                    </method>
                    <method>
                        <signature>PIC.Data.DataEnumItem`1&lt;!0&gt;(!0)</signature>
                        <name>GetItem</name>
                    </method>
                    <method>
                        <signature>PIC.Data.DataEnumItem`1&lt;!0&gt;(string)</signature>
                        <name>GetItemByText</name>
                    </method>
                    <method>
                        <signature>string(!0)</signature>
                        <name>GetTag</name>
                    </method>
                    <method>
                        <signature>string(!0)</signature>
                        <name>GetText</name>
                    </method>
                    <method>
                        <signature>object(string)</signature>
                        <name>GetValueByText</name>
                    </method>
                    <method>
                        <signature>int32(PIC.Data.DataEnumItem`1&lt;!0&gt;)</signature>
                        <name>IndexOf</name>
                    </method>
                    <method>
                        <signature>void(int32, PIC.Data.DataEnumItem`1&lt;!0&gt;)</signature>
                        <name>Insert</name>
                    </method>
                    <method>
                        <signature>bool(!0)</signature>
                        <name>Remove</name>
                    </method>
                    <method>
                        <signature>bool(PIC.Data.DataEnumItem`1&lt;!0&gt;)</signature>
                        <name>Remove</name>
                    </method>
                    <method>
                        <signature>void(int32)</signature>
                        <name>RemoveAt</name>
                    </method>
                    <method>
                        <signature>void(int32, PIC.Data.DataEnumItem`1&lt;!0&gt;)</signature>
                        <name>set_Item</name>
                    </method>
                    <method>
                        <signature>System.Collections.IEnumerator()</signature>
                        <name>System.Collections.IEnumerable.GetEnumerator</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.Func`2&lt;PIC.Data.DataEnumItem`1&lt;!0&gt;,!0&gt;</signature>
                        <name>CS$&lt;&gt;9__CachedAnonymousMethodDelegate12</name>
                        <newname>d</newname>
                    </field>
                    <field>
                        <signature>System.Func`2&lt;PIC.Data.DataEnumItem`1&lt;!0&gt;,string&gt;</signature>
                        <name>CS$&lt;&gt;9__CachedAnonymousMethodDelegate5</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>System.Func`2&lt;PIC.Data.DataEnumItem`1&lt;!0&gt;,string&gt;</signature>
                        <name>CS$&lt;&gt;9__CachedAnonymousMethodDelegatea</name>
                        <newname>c</newname>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.List`1&lt;PIC.Data.DataEnumItem`1&lt;!0&gt;&gt;</signature>
                        <name>m_items</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <arity>1</arity>
                <genericparameter sequence="0">
                    <name>T</name>
                </genericparameter>
                <name>PIC.Data.DataEnumEx`1/&lt;&gt;c__DisplayClass13</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>bool(PIC.Data.DataEnumItem`1&lt;!0&gt;)</signature>
                        <name>&lt;GetValueByText&gt;b__10</name>
                        <newname>b</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>string</signature>
                        <name>text</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <arity>1</arity>
                <genericparameter sequence="0">
                    <name>T</name>
                </genericparameter>
                <name>PIC.Data.DataEnumEx`1/&lt;&gt;c__DisplayClass16</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>bool(PIC.Data.DataEnumItem`1&lt;!0&gt;)</signature>
                        <name>&lt;GetItemByText&gt;b__15</name>
                        <newname>b</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>string</signature>
                        <name>text</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <arity>1</arity>
                <genericparameter sequence="0">
                    <name>T</name>
                </genericparameter>
                <name>PIC.Data.DataEnumEx`1/&lt;&gt;c__DisplayClass6</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>bool(PIC.Data.DataEnumItem`1&lt;!0&gt;)</signature>
                        <name>&lt;GetTag&gt;b__3</name>
                        <newname>b</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>!0</signature>
                        <name>value</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <arity>1</arity>
                <genericparameter sequence="0">
                    <name>T</name>
                </genericparameter>
                <name>PIC.Data.DataEnumEx`1/&lt;&gt;c__DisplayClassb</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>bool(PIC.Data.DataEnumItem`1&lt;!0&gt;)</signature>
                        <name>&lt;GetText&gt;b__8</name>
                        <newname>b</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>!0</signature>
                        <name>value</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <arity>1</arity>
                <genericparameter sequence="0">
                    <name>T</name>
                </genericparameter>
                <name>PIC.Data.DataEnumEx`1/&lt;&gt;c__DisplayClasse</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>bool(PIC.Data.DataEnumItem`1&lt;!0&gt;)</signature>
                        <name>&lt;GetItem&gt;b__d</name>
                        <newname>b</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>!0</signature>
                        <name>value</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>PIC.Data.DataEnumItem</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <arity>1</arity>
                <genericparameter sequence="0">
                    <name>T</name>
                </genericparameter>
                <name>PIC.Data.DataEnumItem`1</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_DisplayText</name>
                    </method>
                    <method>
                        <signature>object()</signature>
                        <name>get_Tag</name>
                    </method>
                    <method>
                        <signature>!0()</signature>
                        <name>get_Value</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_DisplayText</name>
                    </method>
                    <method>
                        <signature>void(object)</signature>
                        <name>set_Tag</name>
                    </method>
                    <method>
                        <signature>void(!0)</signature>
                        <name>set_Value</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>string</signature>
                        <name>&lt;DisplayText&gt;k__BackingField</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>object</signature>
                        <name>&lt;Tag&gt;k__BackingField</name>
                        <newname>c</newname>
                    </field>
                    <field>
                        <signature>!0</signature>
                        <name>&lt;Value&gt;k__BackingField</name>
                        <newname>b</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>PIC.Data.DataHelper</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(System.Data.DataTable, System.Data.SqlClient.SqlConnection, string)</signature>
                        <name>CopyDataToDatabase</name>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.IList`1&lt;PIC.EasyDictionary&gt;(System.Data.DataTable)</signature>
                        <name>DataTableToDictList</name>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.IList`1&lt;object&gt;(System.Data.DataTable)</signature>
                        <name>DataTableToValueList</name>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.IList`1&lt;object&gt;(System.Data.DataTable, string)</signature>
                        <name>DataTableToValueList</name>
                    </method>
                    <method>
                        <signature>string(System.Data.DataTable)</signature>
                        <name>DataTableToXML</name>
                    </method>
                    <method>
                        <signature>string(System.Data.DataTable)</signature>
                        <name>DataTableToXMLItems</name>
                    </method>
                    <method>
                        <signature>void(string, object[])</signature>
                        <name>ExecSp</name>
                    </method>
                    <method>
                        <signature>void(System.Data.IDbConnection, string, object[])</signature>
                        <name>ExecSp</name>
                    </method>
                    <method>
                        <signature>Castle.ActiveRecord.Framework.ISessionFactoryHolder()</signature>
                        <name>get_SessionFactoryHolder</name>
                    </method>
                    <method>
                        <signature>System.Data.IDbConnection()</signature>
                        <name>GetCurrentDbConnection</name>
                    </method>
                    <method>
                        <signature>System.Data.IDbConnection(System.Type)</signature>
                        <name>GetCurrentDbConnection</name>
                    </method>
                    <method>
                        <signature>System.Data.DataTable(string)</signature>
                        <name>GetDataSchema</name>
                    </method>
                    <method>
                        <signature>System.Data.DataTable(string, System.Data.IDbConnection)</signature>
                        <name>GetDataSchema</name>
                    </method>
                    <method>
                        <signature>NHibernate.IQuery(NHibernate.ISession, string, object[])</signature>
                        <name>GetHqlQuery</name>
                    </method>
                    <method>
                        <signature>NHibernate.IQuery(string, object[])</signature>
                        <name>GetHqlQuery</name>
                    </method>
                    <method>
                        <signature>void(NHibernate.ISession, string)</signature>
                        <name>HqlDelete</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>HqlDelete</name>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.IList`1&lt;PIC.KeyValuePairList&gt;(string, object[])</signature>
                        <name>HqlQueryKeyValuesList</name>
                    </method>
                    <method>
                        <signature>System.Collections.IList(NHibernate.ISession, string, object[])</signature>
                        <name>HqlQueryList</name>
                    </method>
                    <method>
                        <signature>System.Collections.IList(string, object[])</signature>
                        <name>HqlQueryList</name>
                    </method>
                    <method>
                        <signature>object[](string, object[])</signature>
                        <name>HqlQueryObjects</name>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.IList`1&lt;object[]&gt;(string, object[])</signature>
                        <name>HqlQueryObjectsList</name>
                    </method>
                    <method>
                        <signature>void(NHibernate.ISession, string, object[])</signature>
                        <name>HqlUpdate</name>
                    </method>
                    <method>
                        <signature>void(string, object[])</signature>
                        <name>HqlUpdate</name>
                    </method>
                    <method>
                        <arity>1</arity>
                        <signature>!!0(!!0, !!0)</signature>
                        <name>MergeData</name>
                    </method>
                    <method>
                        <arity>1</arity>
                        <signature>!!0(!!0, !!0, System.Collections.Generic.ICollection`1&lt;string&gt;)</signature>
                        <name>MergeData</name>
                    </method>
                    <method>
                        <arity>1</arity>
                        <signature>NHibernate.ISession()</signature>
                        <name>OpenHqlSession</name>
                    </method>
                    <method>
                        <signature>NHibernate.ISession()</signature>
                        <name>OpenHqlSession</name>
                    </method>
                    <method>
                        <signature>NHibernate.ISession(System.Data.IDbConnection)</signature>
                        <name>OpenHqlSession</name>
                    </method>
                    <method>
                        <arity>1</arity>
                        <signature>NHibernate.ISession(System.Data.IDbConnection)</signature>
                        <name>OpenHqlSession</name>
                    </method>
                    <method>
                        <signature>NHibernate.ISession(System.Type)</signature>
                        <name>OpenHqlSession</name>
                    </method>
                    <method>
                        <signature>System.Data.DataTable(string)</signature>
                        <name>QueryDataTable</name>
                    </method>
                    <method>
                        <signature>System.Data.DataTable(string, System.Data.IDbConnection)</signature>
                        <name>QueryDataTable</name>
                    </method>
                    <method>
                        <signature>PIC.EasyDictionary(string)</signature>
                        <name>QueryDict</name>
                    </method>
                    <method>
                        <signature>PIC.EasyDictionary(string, string, string)</signature>
                        <name>QueryDict</name>
                    </method>
                    <method>
                        <signature>PIC.EasyDictionary(string, System.Data.IDbConnection)</signature>
                        <name>QueryDict</name>
                    </method>
                    <method>
                        <signature>PIC.EasyDictionary(string, System.Data.IDbConnection, string, string)</signature>
                        <name>QueryDict</name>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.IList`1&lt;PIC.EasyDictionary&gt;(string)</signature>
                        <name>QueryDictList</name>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.IList`1&lt;object[]&gt;(string)</signature>
                        <name>QueryObjectsList</name>
                    </method>
                    <method>
                        <arity>1</arity>
                        <signature>!!0(string)</signature>
                        <name>QueryValue</name>
                    </method>
                    <method>
                        <arity>1</arity>
                        <signature>!!0(string, System.Data.IDbConnection)</signature>
                        <name>QueryValue</name>
                    </method>
                    <method>
                        <signature>object(string)</signature>
                        <name>QueryValue</name>
                    </method>
                    <method>
                        <signature>object(string, System.Data.IDbConnection)</signature>
                        <name>QueryValue</name>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.IList`1&lt;object&gt;(string)</signature>
                        <name>QueryValueList</name>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.IList`1&lt;object&gt;(string, string)</signature>
                        <name>QueryValueList</name>
                    </method>
                    <method>
                        <signature>void(NHibernate.ISession)</signature>
                        <name>ReleaseHqlSessin</name>
                    </method>
                    <method>
                        <signature>System.Data.DataSet(string)</signature>
                        <name>XMLToDataSet</name>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <name>PIC.Data.DataMessage</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(PIC.Data.DataContainer)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_Lable</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_Lable</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>ToString</name>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <name>PIC.Data.DataNode</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(System.Xml.XmlDocument, System.Xml.XmlElement)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(System.Xml.XmlElement)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>PIC.Data.DataElement(PIC.Data.DataElement)</signature>
                        <name>AddElement</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>Clear</name>
                    </method>
                    <method>
                        <signature>System.Xml.XmlNode(bool)</signature>
                        <name>CloneNode</name>
                    </method>
                    <method>
                        <signature>System.Xml.XmlNode(string)</signature>
                        <name>CloneNode</name>
                    </method>
                    <method>
                        <signature>PIC.Data.DataElement(int32)</signature>
                        <name>GetElement</name>
                    </method>
                    <method>
                        <signature>PIC.Data.DataElement(string)</signature>
                        <name>GetElement</name>
                    </method>
                    <method>
                        <signature>PIC.Data.DataElement(string, string)</signature>
                        <name>GetElement</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>GetElementCount</name>
                    </method>
                    <method>
                        <signature>System.Collections.ArrayList(string)</signature>
                        <name>GetElements</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>GetName</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>Init</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>NewElement</name>
                    </method>
                    <method>
                        <signature>void(int32)</signature>
                        <name>Remove</name>
                    </method>
                    <method>
                        <signature>void(PIC.Data.DataElement)</signature>
                        <name>Remove</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>SetName</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>Sort</name>
                    </method>
                    <method>
                        <signature>string(string, string)</signature>
                        <name>Sort</name>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <name>PIC.Data.DataNodeType</name>
                <methodlist />
                <fieldlist>
                    <field>
                        <signature>PIC.Data.DataNodeType</signature>
                        <name>Collection</name>
                    </field>
                    <field>
                        <signature>PIC.Data.DataNodeType</signature>
                        <name>Element</name>
                    </field>
                    <field>
                        <signature>PIC.Data.DataNodeType</signature>
                        <name>Node</name>
                    </field>
                    <field>
                        <signature>PIC.Data.DataNodeType</signature>
                        <name>Parameter</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>value__</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>PIC.Data.DataParameter</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(PIC.Data.DataParameter)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(string, string)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(System.Xml.XmlDocument, System.Xml.XmlElement)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(System.Xml.XmlElement)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>PIC.Data.DataElement(PIC.Data.DataElement)</signature>
                        <name>AddElement</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>Clear</name>
                    </method>
                    <method>
                        <signature>PIC.Data.DataParameter(bool)</signature>
                        <name>Clone</name>
                    </method>
                    <method>
                        <signature>PIC.Data.DataParameter(string)</signature>
                        <name>Clone</name>
                    </method>
                    <method>
                        <signature>PIC.Data.DataElement(int32)</signature>
                        <name>GetElement</name>
                    </method>
                    <method>
                        <signature>PIC.Data.DataElement(string)</signature>
                        <name>GetElement</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>GetElementCount</name>
                    </method>
                    <method>
                        <signature>System.Collections.ArrayList(string)</signature>
                        <name>GetElements</name>
                    </method>
                    <method>
                        <signature>void(int32)</signature>
                        <name>Remove</name>
                    </method>
                    <method>
                        <signature>void(PIC.Data.DataElement)</signature>
                        <name>Remove</name>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <arity>1</arity>
                <genericparameter sequence="0">
                    <name>T</name>
                </genericparameter>
                <name>PIC.Data.EditSensitiveEntityBase`1</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>bool(PIC.Data.EditStatusEnum)</signature>
                        <name>CheckEditStatus</name>
                    </method>
                    <method>
                        <signature>bool(string)</signature>
                        <name>CheckEditStatus</name>
                    </method>
                    <method>
                        <signature>!0[](PIC.Data.EditStatusEnum)</signature>
                        <name>FindAll</name>
                    </method>
                    <method>
                        <signature>!0[](PIC.Data.HqlSearchCriterion, PIC.Data.EditStatusEnum)</signature>
                        <name>FindAll</name>
                    </method>
                    <method>
                        <signature>!0[](PIC.Data.HqlSearchCriterion, PIC.Data.EditStatusEnum, NHibernate.Criterion.ICriterion[])</signature>
                        <name>FindAll</name>
                    </method>
                    <method>
                        <signature>!0[](PIC.Data.HqlSearchCriterion, string)</signature>
                        <name>FindAll</name>
                    </method>
                    <method>
                        <signature>!0[](PIC.Data.HqlSearchCriterion, string, NHibernate.Criterion.ICriterion[])</signature>
                        <name>FindAll</name>
                    </method>
                    <method>
                        <signature>!0[](string)</signature>
                        <name>FindAll</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_Creatable</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_Deletable</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_Editable</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_EditStatus</name>
                    </method>
                    <method>
                        <signature>PIC.Data.EditStatusEnum()</signature>
                        <name>get_EditStatusFlag</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_Readable</name>
                    </method>
                    <method>
                        <signature>void(PIC.Data.EditStatusEnum)</signature>
                        <name>RemoveEditStatus</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>RemoveEditStatus</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>RemoveFullEditStatus</name>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>set_Creatable</name>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>set_Deletable</name>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>set_Editable</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_EditStatus</name>
                    </method>
                    <method>
                        <signature>void(PIC.Data.EditStatusEnum)</signature>
                        <name>set_EditStatusFlag</name>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>set_Readable</name>
                    </method>
                    <method>
                        <signature>void(PIC.Data.EditStatusEnum)</signature>
                        <name>SetEditStatus</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>SetEditStatus</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>SetFullEditStatus</name>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <name>PIC.Data.EditSensitiveEntityHelper</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>bool(PIC.Data.IEditSensitiveEntity, PIC.Data.EditStatusEnum)</signature>
                        <name>CheckEditStatus</name>
                    </method>
                    <method>
                        <signature>bool(PIC.Data.IEditSensitiveEntity, string)</signature>
                        <name>CheckEditStatus</name>
                    </method>
                    <method>
                        <signature>PIC.Data.EditStatusEnum(string)</signature>
                        <name>GetEditStatusFlag</name>
                    </method>
                    <method>
                        <signature>void(PIC.Data.IEditSensitiveEntity, PIC.Data.EditStatusEnum)</signature>
                        <name>RemoveEditStatus</name>
                    </method>
                    <method>
                        <signature>void(PIC.Data.IEditSensitiveEntity, string)</signature>
                        <name>RemoveEditStatus</name>
                    </method>
                    <method>
                        <signature>void(PIC.Data.IEditSensitiveEntity)</signature>
                        <name>RemoveFullEditStatus</name>
                    </method>
                    <method>
                        <signature>void(PIC.Data.IEditSensitiveEntity, PIC.Data.EditStatusEnum)</signature>
                        <name>SetEditStatus</name>
                    </method>
                    <method>
                        <signature>void(PIC.Data.IEditSensitiveEntity, string)</signature>
                        <name>SetEditStatus</name>
                    </method>
                    <method>
                        <signature>void(PIC.Data.IEditSensitiveEntity)</signature>
                        <name>SetFullEditStatus</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>string</signature>
                        <name>CreateStateString</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>DeleteStateString</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>FullStateString</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>ReadStateString</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>UpdateStateString</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <arity>1</arity>
                <genericparameter sequence="0">
                    <name>T</name>
                </genericparameter>
                <name>PIC.Data.EditSensitiveRuleBase`1</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>!0[](PIC.Data.EditStatusEnum)</signature>
                        <name>FindAll</name>
                    </method>
                    <method>
                        <signature>!0[](PIC.Data.SearchCriterion, PIC.Data.EditStatusEnum)</signature>
                        <name>FindAll</name>
                    </method>
                    <method>
                        <signature>!0[](PIC.Data.SearchCriterion, PIC.Data.EditStatusEnum, NHibernate.Criterion.ICriterion[])</signature>
                        <name>FindAll</name>
                    </method>
                    <method>
                        <signature>!0[](PIC.Data.SearchCriterion, string)</signature>
                        <name>FindAll</name>
                    </method>
                    <method>
                        <signature>!0[](PIC.Data.SearchCriterion, string, NHibernate.Criterion.ICriterion[])</signature>
                        <name>FindAll</name>
                    </method>
                    <method>
                        <signature>!0[](string)</signature>
                        <name>FindAll</name>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <arity>1</arity>
                <genericparameter sequence="0">
                    <name>T</name>
                </genericparameter>
                <name>PIC.Data.EditSensitiveTreeNodeEntityBase`1</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>bool(PIC.Data.EditStatusEnum)</signature>
                        <name>CheckEditStatus</name>
                    </method>
                    <method>
                        <signature>bool(string)</signature>
                        <name>CheckEditStatus</name>
                    </method>
                    <method>
                        <signature>!0[](PIC.Data.HqlSearchCriterion, PIC.Data.EditStatusEnum)</signature>
                        <name>FindAll</name>
                    </method>
                    <method>
                        <signature>!0[](PIC.Data.HqlSearchCriterion, PIC.Data.EditStatusEnum, NHibernate.Criterion.ICriterion[])</signature>
                        <name>FindAll</name>
                    </method>
                    <method>
                        <signature>!0[](PIC.Data.HqlSearchCriterion, string)</signature>
                        <name>FindAll</name>
                    </method>
                    <method>
                        <signature>!0[](PIC.Data.HqlSearchCriterion, string, NHibernate.Criterion.ICriterion[])</signature>
                        <name>FindAll</name>
                    </method>
                    <method>
                        <signature>!0[](PIC.Data.EditStatusEnum)</signature>
                        <name>FindAllByEditStatus</name>
                    </method>
                    <method>
                        <signature>!0[](string)</signature>
                        <name>FindAllByEditStatus</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_Creatable</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_Deletable</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_Editable</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_EditStatus</name>
                    </method>
                    <method>
                        <signature>PIC.Data.EditStatusEnum()</signature>
                        <name>get_EditStatusFlag</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_Readable</name>
                    </method>
                    <method>
                        <signature>void(PIC.Data.EditStatusEnum)</signature>
                        <name>RemoveEditStatus</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>RemoveEditStatus</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>RemoveFullEditStatus</name>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>set_Creatable</name>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>set_Deletable</name>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>set_Editable</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_EditStatus</name>
                    </method>
                    <method>
                        <signature>void(PIC.Data.EditStatusEnum)</signature>
                        <name>set_EditStatusFlag</name>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>set_Readable</name>
                    </method>
                    <method>
                        <signature>void(PIC.Data.EditStatusEnum)</signature>
                        <name>SetEditStatus</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>SetEditStatus</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>SetFullEditStatus</name>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <name>PIC.Data.EditStatusEnum</name>
                <methodlist />
                <fieldlist>
                    <field>
                        <signature>PIC.Data.EditStatusEnum</signature>
                        <name>Create</name>
                    </field>
                    <field>
                        <signature>PIC.Data.EditStatusEnum</signature>
                        <name>Delete</name>
                    </field>
                    <field>
                        <signature>PIC.Data.EditStatusEnum</signature>
                        <name>Other</name>
                    </field>
                    <field>
                        <signature>PIC.Data.EditStatusEnum</signature>
                        <name>Read</name>
                    </field>
                    <field>
                        <signature>PIC.Data.EditStatusEnum</signature>
                        <name>Update</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>value__</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <arity>1</arity>
                <genericparameter sequence="0">
                    <name>T</name>
                </genericparameter>
                <name>PIC.Data.EntityBase`1</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.cctor</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(PIC.PICPropertyChangedEventHandler)</signature>
                        <name>add_PICPropertyChanged</name>
                    </method>
                    <method>
                        <signature>!0(object)</signature>
                        <name>AutoFind</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>Create</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>CreateAndFlush</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>Delete</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>DeleteAndFlush</name>
                    </method>
                    <method>
                        <signature>!0[](PIC.Data.SearchCriterion)</signature>
                        <name>FindAll</name>
                    </method>
                    <method>
                        <signature>!0[](PIC.Data.SearchCriterion, NHibernate.Criterion.ICriterion[])</signature>
                        <name>FindAll</name>
                    </method>
                    <method>
                        <signature>!0[](string, object[])</signature>
                        <name>FindAll</name>
                    </method>
                    <method>
                        <signature>!0[](PIC.Data.HqlSearchCriterion, NHibernate.Criterion.ICriterion[])</signature>
                        <name>FindAllByCriterion</name>
                    </method>
                    <method>
                        <signature>!0[](object[])</signature>
                        <name>FindAllByPrimaryKeys</name>
                    </method>
                    <method>
                        <signature>!0[](int32, string, object[])</signature>
                        <name>FindAllByProperties</name>
                    </method>
                    <method>
                        <signature>!0[](object[])</signature>
                        <name>FindAllByProperties</name>
                    </method>
                    <method>
                        <signature>!0[](PIC.Data.HqlSearchCriterion)</signature>
                        <name>FindAllBySearchCriterion</name>
                    </method>
                    <method>
                        <signature>!0(object[])</signature>
                        <name>FindFirstByProperties</name>
                    </method>
                    <method>
                        <signature>System.Collections.ObjectModel.ReadOnlyCollection`1&lt;System.Reflection.PropertyInfo&gt;()</signature>
                        <name>get_AllProperties</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_ClassName</name>
                    </method>
                    <method>
                        <signature>System.Type()</signature>
                        <name>get_PrimaryKeyDataType</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_PrimaryKeyName</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_TableName</name>
                    </method>
                    <method>
                        <signature>PIC.Data.EntityBase`1&lt;!0&gt;()</signature>
                        <name>GetCopy</name>
                    </method>
                    <method>
                        <signature>NHibernate.Criterion.DetachedCriteria(object[])</signature>
                        <name>GetCriteriaByProperties</name>
                    </method>
                    <method>
                        <signature>object()</signature>
                        <name>GetPrimaryValue</name>
                    </method>
                    <method>
                        <arity>1</arity>
                        <signature>!!0(string)</signature>
                        <name>GetValue</name>
                    </method>
                    <method>
                        <signature>object(string)</signature>
                        <name>GetValue</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>Initialize</name>
                    </method>
                    <method>
                        <signature>bool(string)</signature>
                        <name>IsPropertyUnique</name>
                    </method>
                    <method>
                        <signature>void(object, PIC.PICPropertyChangedEventArgs)</signature>
                        <name>OnPropertyChanged</name>
                    </method>
                    <method>
                        <signature>void(string, object, object)</signature>
                        <name>RaisePropertyChanged</name>
                    </method>
                    <method>
                        <signature>void(PIC.PICPropertyChangedEventHandler)</signature>
                        <name>remove_PICPropertyChanged</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>Save</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>SaveAndFlush</name>
                    </method>
                    <method>
                        <signature>void(string, object)</signature>
                        <name>SetValue</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>ToString</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>Update</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>UpdateAndFlush</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.Collections.ObjectModel.ReadOnlyCollection`1&lt;System.Reflection.PropertyInfo&gt;</signature>
                        <name>allProperties</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>className</name>
                    </field>
                    <field>
                        <signature>PIC.PICPropertyChangedEventHandler</signature>
                        <name>PICPropertyChanged</name>
                    </field>
                    <field>
                        <signature>System.Type</signature>
                        <name>primaryKeyDataType</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>primaryKeyName</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>tableName</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>PIC.Data.EntityBase`1/&lt;&gt;z__Aspects</name>
                <newname>PIC.Data.EntityBase`1/a</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.cctor</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>PIC.Aop.LogAttribute</signature>
                        <name>a0</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>PIC.Aop.ExceptionAttribute</signature>
                        <name>a1</name>
                        <newname>c</newname>
                    </field>
                    <field>
                        <signature>PIC.Aop.LogAttribute</signature>
                        <name>a10</name>
                        <newname>q</newname>
                    </field>
                    <field>
                        <signature>PIC.Aop.ExceptionAttribute</signature>
                        <name>a11</name>
                        <newname>r</newname>
                    </field>
                    <field>
                        <signature>PIC.Aop.LogAttribute</signature>
                        <name>a12</name>
                        <newname>t</newname>
                    </field>
                    <field>
                        <signature>PIC.Aop.ExceptionAttribute</signature>
                        <name>a13</name>
                        <newname>u</newname>
                    </field>
                    <field>
                        <signature>PIC.Aop.LogAttribute</signature>
                        <name>a14</name>
                        <newname>w</newname>
                    </field>
                    <field>
                        <signature>PIC.Aop.ExceptionAttribute</signature>
                        <name>a15</name>
                        <newname>x</newname>
                    </field>
                    <field>
                        <signature>PIC.Aop.LogAttribute</signature>
                        <name>a2</name>
                        <newname>e</newname>
                    </field>
                    <field>
                        <signature>PIC.Aop.ExceptionAttribute</signature>
                        <name>a3</name>
                        <newname>f</newname>
                    </field>
                    <field>
                        <signature>PIC.Aop.LogAttribute</signature>
                        <name>a4</name>
                        <newname>h</newname>
                    </field>
                    <field>
                        <signature>PIC.Aop.ExceptionAttribute</signature>
                        <name>a5</name>
                        <newname>i</newname>
                    </field>
                    <field>
                        <signature>PIC.Aop.LogAttribute</signature>
                        <name>a6</name>
                        <newname>k</newname>
                    </field>
                    <field>
                        <signature>PIC.Aop.ExceptionAttribute</signature>
                        <name>a7</name>
                        <newname>l</newname>
                    </field>
                    <field>
                        <signature>PIC.Aop.LogAttribute</signature>
                        <name>a8</name>
                        <newname>n</newname>
                    </field>
                    <field>
                        <signature>PIC.Aop.ExceptionAttribute</signature>
                        <name>a9</name>
                        <newname>o</newname>
                    </field>
                    <field>
                        <signature>System.Reflection.MethodBase</signature>
                        <name>m1</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>System.Reflection.MethodBase</signature>
                        <name>m10</name>
                        <newname>j</newname>
                    </field>
                    <field>
                        <signature>System.Reflection.MethodBase</signature>
                        <name>m13</name>
                        <newname>m</newname>
                    </field>
                    <field>
                        <signature>System.Reflection.MethodBase</signature>
                        <name>m16</name>
                        <newname>p</newname>
                    </field>
                    <field>
                        <signature>System.Reflection.MethodBase</signature>
                        <name>m19</name>
                        <newname>s</newname>
                    </field>
                    <field>
                        <signature>System.Reflection.MethodBase</signature>
                        <name>m22</name>
                        <newname>v</newname>
                    </field>
                    <field>
                        <signature>System.Reflection.MethodBase</signature>
                        <name>m4</name>
                        <newname>d</newname>
                    </field>
                    <field>
                        <signature>System.Reflection.MethodBase</signature>
                        <name>m7</name>
                        <newname>g</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>PIC.Data.EntityManager</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>InitializeEntity</name>
                    </method>
                    <method>
                        <signature>void(string[], string[], System.Type[])</signature>
                        <name>InitializeEntity</name>
                    </method>
                    <method>
                        <signature>void(string[], System.Type[])</signature>
                        <name>InitializeEntity</name>
                    </method>
                    <method>
                        <signature>void(System.Reflection.Assembly[], System.Reflection.Assembly[], System.Type[])</signature>
                        <name>InitializeEntity</name>
                    </method>
                    <method>
                        <signature>Castle.ActiveRecord.Framework.IConfigurationSource()</signature>
                        <name>RetrieveActiveRecordConfigSource</name>
                        <newname>a</newname>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <arity>1</arity>
                <genericparameter sequence="0">
                    <name>T</name>
                </genericparameter>
                <name>PIC.Data.ExecutableEntityBase`1</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_ExecuteState</name>
                    </method>
                    <method>
                        <signature>PIC.Data.ExecuteStateEnum()</signature>
                        <name>get_ExecuteStateFlag</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_ExecuteState</name>
                    </method>
                    <method>
                        <signature>void(PIC.Data.ExecuteStateEnum)</signature>
                        <name>set_ExecuteStateFlag</name>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <name>PIC.Data.ExecutableEntityHelper</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>PIC.Data.ExecuteStateEnum(string)</signature>
                        <name>GetExecuteStateFlag</name>
                    </method>
                    <method>
                        <signature>void(PIC.Data.IEditSensitiveEntity, string)</signature>
                        <name>SetExecuteState</name>
                    </method>
                    <method>
                        <signature>void(PIC.Data.IExecutableEntity, PIC.Data.ExecuteStateEnum)</signature>
                        <name>SetExecuteState</name>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <arity>1</arity>
                <genericparameter sequence="0">
                    <name>T</name>
                </genericparameter>
                <name>PIC.Data.ExecutableRuleBase`1</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>!0[](PIC.Data.SearchCriterion, PIC.Data.ExecuteStateEnum)</signature>
                        <name>FindAll</name>
                    </method>
                    <method>
                        <signature>!0[](PIC.Data.SearchCriterion, PIC.Data.ExecuteStateEnum, NHibernate.Criterion.ICriterion[])</signature>
                        <name>FindAll</name>
                    </method>
                    <method>
                        <signature>!0[](PIC.Data.SearchCriterion, string)</signature>
                        <name>FindAll</name>
                    </method>
                    <method>
                        <signature>!0[](PIC.Data.SearchCriterion, string, NHibernate.Criterion.ICriterion[])</signature>
                        <name>FindAll</name>
                    </method>
                    <method>
                        <signature>!0[]()</signature>
                        <name>FindAllUnstarted</name>
                    </method>
                    <method>
                        <signature>!0[](PIC.Data.SearchCriterion)</signature>
                        <name>FindAllUnstarted</name>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <name>PIC.Data.ExecuteStateEnum</name>
                <methodlist />
                <fieldlist>
                    <field>
                        <signature>PIC.Data.ExecuteStateEnum</signature>
                        <name>Aborted</name>
                    </field>
                    <field>
                        <signature>PIC.Data.ExecuteStateEnum</signature>
                        <name>Consigning</name>
                    </field>
                    <field>
                        <signature>PIC.Data.ExecuteStateEnum</signature>
                        <name>Executing</name>
                    </field>
                    <field>
                        <signature>PIC.Data.ExecuteStateEnum</signature>
                        <name>Finish</name>
                    </field>
                    <field>
                        <signature>PIC.Data.ExecuteStateEnum</signature>
                        <name>Other</name>
                    </field>
                    <field>
                        <signature>PIC.Data.ExecuteStateEnum</signature>
                        <name>Stopped</name>
                    </field>
                    <field>
                        <signature>PIC.Data.ExecuteStateEnum</signature>
                        <name>Suspended</name>
                    </field>
                    <field>
                        <signature>PIC.Data.ExecuteStateEnum</signature>
                        <name>Unstarted</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>value__</name>
                    </field>
                    <field>
                        <signature>PIC.Data.ExecuteStateEnum</signature>
                        <name>Waiting</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>PIC.Data.FTSearchCriterionBuilderForHql</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>NHibernate.Criterion.ICriterion(PIC.Data.FTSearchCriterionItem)</signature>
                        <name>BuildCriterion</name>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <name>PIC.Data.FTSearchCriterionItem</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(PIC.Data.FTSearchCriterionItem)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(System.Collections.Generic.IList`1&lt;string&gt;, string)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.IList`1&lt;string&gt;()</signature>
                        <name>get_ColumnList</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_Value</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>GetColumnListString</name>
                    </method>
                    <method>
                        <signature>void(System.Collections.Generic.IList`1&lt;string&gt;)</signature>
                        <name>set_ColumnList</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_Value</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>ToSQLString</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>string</signature>
                        <name>&lt;Value&gt;k__BackingField</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.IList`1&lt;string&gt;</signature>
                        <name>columnList</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>PIC.Data.HqlCommonSearchCriterionItem</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(PIC.Data.CommonSearchCriterionItem)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(string, object)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(string, object, PIC.Data.SearchModeEnum)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(string, object, PIC.Data.SearchModeEnum, System.TypeCode)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(string, object, System.TypeCode)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(string, PIC.Data.SingleSearchModeEnum)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>NHibernate.Criterion.ICriterion()</signature>
                        <name>GetCriterion</name>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <name>PIC.Data.HqlFTSearchCriterionItem</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(PIC.Data.FTSearchCriterionBuilderForHql)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(PIC.Data.FTSearchCriterionBuilderForHql, PIC.Data.FTSearchCriterionItem)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(PIC.Data.FTSearchCriterionBuilderForHql, string)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(PIC.Data.FTSearchCriterionBuilderForHql, System.Collections.Generic.IList`1&lt;string&gt;, string)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(PIC.Data.FTSearchCriterionItem)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(System.Collections.Generic.IList`1&lt;string&gt;, string)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>PIC.Data.FTSearchCriterionBuilderForHql()</signature>
                        <name>get_FtCritBuilder</name>
                    </method>
                    <method>
                        <signature>NHibernate.Criterion.ICriterion()</signature>
                        <name>GetCriterion</name>
                    </method>
                    <method>
                        <signature>void(PIC.Data.FTSearchCriterionBuilderForHql)</signature>
                        <name>set_FtCritBuilder</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>PIC.Data.FTSearchCriterionBuilderForHql</signature>
                        <name>&lt;FtCritBuilder&gt;k__BackingField</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>PIC.Data.HqlJunctionSearchCriterionItem</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(PIC.Data.JunctionMode)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(PIC.Data.JunctionSearchCriterionItem)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>PIC.Data.FTSearchCriterionBuilderForHql()</signature>
                        <name>get_FtCritBuilder</name>
                    </method>
                    <method>
                        <signature>NHibernate.Criterion.ICriterion()</signature>
                        <name>GetCriterion</name>
                    </method>
                    <method>
                        <signature>void(PIC.Data.FTSearchCriterionBuilderForHql)</signature>
                        <name>set_FtCritBuilder</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>PIC.Data.FTSearchCriterionBuilderForHql</signature>
                        <name>&lt;FtCritBuilder&gt;k__BackingField</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>PIC.Data.HqlKeyValueResultTransformer</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>System.Collections.IList(System.Collections.IList)</signature>
                        <name>TransformList</name>
                    </method>
                    <method>
                        <signature>object(object[], string[])</signature>
                        <name>TransformTuple</name>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <name>PIC.Data.HqlOrderCriterionItem</name>
                <methodlist>
                    <method>
                        <signature>void(PIC.Data.OrderCriterionItem)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(string, bool)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>NHibernate.Criterion.Order()</signature>
                        <name>GetOrder</name>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <name>PIC.Data.HqlSearchCriterion</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(PIC.Data.FTSearchCriterionBuilderForHql)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>NHibernate.Criterion.DetachedCriteria(NHibernate.Criterion.DetachedCriteria, bool&amp;)</signature>
                        <name>AddOrderCriteria</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <arity>1</arity>
                        <signature>!!0[]()</signature>
                        <name>FindAll</name>
                    </method>
                    <method>
                        <arity>1</arity>
                        <signature>!!0[](NHibernate.Criterion.ICriterion[])</signature>
                        <name>FindAll</name>
                    </method>
                    <method>
                        <arity>1</arity>
                        <signature>NHibernate.Criterion.DetachedCriteria()</signature>
                        <name>GetDetachedCriteria</name>
                    </method>
                    <method>
                        <arity>1</arity>
                        <signature>NHibernate.Criterion.DetachedCriteria()</signature>
                        <name>GetDetachedCriteriaWithoutOrder</name>
                    </method>
                    <method>
                        <signature>void(PIC.Data.FTSearchCriterionBuilderForHql)</signature>
                        <name>SetFullTextCriterionBuilder</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>PIC.Data.FTSearchCriterionBuilderForHql</signature>
                        <name>_ftCritBuilder</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <arity>1</arity>
                <genericparameter sequence="0">
                    <name>T</name>
                </genericparameter>
                <name>PIC.Data.HqlSearchCriterion/&lt;&gt;c__DisplayClass9`1</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>bool(System.Reflection.PropertyInfo)</signature>
                        <name>&lt;GetDetachedCriteria&gt;b__7</name>
                        <newname>b</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>string</signature>
                        <name>tfield</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>PIC.Data.IEditSensitiveEntity</name>
                <methodlist>
                    <method>
                        <signature>string()</signature>
                        <name>get_EditStatus</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_EditStatus</name>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <name>PIC.Data.IEntity</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>Create</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>Delete</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>Update</name>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <name>PIC.Data.IExecutableEntity</name>
                <methodlist>
                    <method>
                        <signature>string()</signature>
                        <name>get_ExecuteState</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_ExecuteState</name>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <name>PIC.Data.IHqlOrderCriterionItem</name>
                <methodlist>
                    <method>
                        <signature>NHibernate.Criterion.Order()</signature>
                        <name>GetOrder</name>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <name>PIC.Data.IHqlSearchCriterionItem</name>
                <methodlist>
                    <method>
                        <signature>NHibernate.Criterion.ICriterion()</signature>
                        <name>GetCriterion</name>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <arity>1</arity>
                <genericparameter sequence="0">
                    <name>T</name>
                </genericparameter>
                <name>PIC.Data.ITreeNodeEntity`1</name>
                <methodlist>
                    <method>
                        <signature>string()</signature>
                        <name>get_ParentID</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_Path</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_ParentID</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_Path</name>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <name>PIC.Data.JunctionMode</name>
                <methodlist />
                <fieldlist>
                    <field>
                        <signature>PIC.Data.JunctionMode</signature>
                        <name>And</name>
                    </field>
                    <field>
                        <signature>PIC.Data.JunctionMode</signature>
                        <name>Or</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>value__</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>PIC.Data.JunctionSearchCriterionItem</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(PIC.Data.JunctionMode)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(PIC.Data.JunctionSearchCriterionItem)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>AddFTSearch</name>
                    </method>
                    <method>
                        <signature>void(System.Collections.Generic.List`1&lt;string&gt;, string)</signature>
                        <name>AddFTSearch</name>
                    </method>
                    <method>
                        <signature>void(string, object)</signature>
                        <name>AddSearch</name>
                    </method>
                    <method>
                        <signature>void(string, object, PIC.Data.SearchModeEnum)</signature>
                        <name>AddSearch</name>
                    </method>
                    <method>
                        <signature>void(string, object, PIC.Data.SearchModeEnum, System.TypeCode)</signature>
                        <name>AddSearch</name>
                    </method>
                    <method>
                        <signature>void(string, object, System.TypeCode)</signature>
                        <name>AddSearch</name>
                    </method>
                    <method>
                        <signature>void(string, PIC.Data.SingleSearchModeEnum)</signature>
                        <name>AddSearch</name>
                    </method>
                    <method>
                        <signature>void(string[], PIC.Data.SingleSearchModeEnum)</signature>
                        <name>AddSearches</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>Clear</name>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.List`1&lt;PIC.Data.FTSearchCriterionItem&gt;()</signature>
                        <name>get_FTSearches</name>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.List`1&lt;PIC.Data.JunctionSearchCriterionItem&gt;()</signature>
                        <name>get_JuncSearches</name>
                    </method>
                    <method>
                        <signature>PIC.Data.JunctionMode()</signature>
                        <name>get_JunctionMode</name>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.List`1&lt;PIC.Data.CommonSearchCriterionItem&gt;()</signature>
                        <name>get_Searches</name>
                    </method>
                    <method>
                        <signature>PIC.Data.CommonSearchCriterionItem(string)</signature>
                        <name>GetFirstSearch</name>
                    </method>
                    <method>
                        <signature>PIC.Data.CommonSearchCriterionItem(string, PIC.Data.SearchModeEnum)</signature>
                        <name>GetFirstSearch</name>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.IList`1&lt;PIC.Data.CommonSearchCriterionItem&gt;(string)</signature>
                        <name>GetSearches</name>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.IList`1&lt;PIC.Data.CommonSearchCriterionItem&gt;(string, PIC.Data.SearchModeEnum)</signature>
                        <name>GetSearches</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>RemoveSearch</name>
                    </method>
                    <method>
                        <signature>void(string[])</signature>
                        <name>RemoveSearch</name>
                    </method>
                    <method>
                        <signature>void(System.Collections.Generic.List`1&lt;PIC.Data.FTSearchCriterionItem&gt;)</signature>
                        <name>set_FTSearches</name>
                    </method>
                    <method>
                        <signature>void(System.Collections.Generic.List`1&lt;PIC.Data.JunctionSearchCriterionItem&gt;)</signature>
                        <name>set_JuncSearches</name>
                    </method>
                    <method>
                        <signature>void(PIC.Data.JunctionMode)</signature>
                        <name>set_JunctionMode</name>
                    </method>
                    <method>
                        <signature>void(System.Collections.Generic.List`1&lt;PIC.Data.CommonSearchCriterionItem&gt;)</signature>
                        <name>set_Searches</name>
                    </method>
                    <method>
                        <signature>void(string, object)</signature>
                        <name>SetSearch</name>
                    </method>
                    <method>
                        <signature>void(string, object, PIC.Data.SearchModeEnum)</signature>
                        <name>SetSearch</name>
                    </method>
                    <method>
                        <signature>void(string, object, PIC.Data.SearchModeEnum, System.TypeCode)</signature>
                        <name>SetSearch</name>
                    </method>
                    <method>
                        <signature>void(string, object, System.TypeCode)</signature>
                        <name>SetSearch</name>
                    </method>
                    <method>
                        <signature>void(string, PIC.Data.SingleSearchModeEnum)</signature>
                        <name>SetSearch</name>
                    </method>
                    <method>
                        <signature>void(string[], PIC.Data.SingleSearchModeEnum)</signature>
                        <name>SetSearches</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>ToSQLString</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.Collections.Generic.List`1&lt;PIC.Data.FTSearchCriterionItem&gt;</signature>
                        <name>&lt;FTSearches&gt;k__BackingField</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.List`1&lt;PIC.Data.JunctionSearchCriterionItem&gt;</signature>
                        <name>&lt;JuncSearches&gt;k__BackingField</name>
                        <newname>c</newname>
                    </field>
                    <field>
                        <signature>PIC.Data.JunctionMode</signature>
                        <name>&lt;JunctionMode&gt;k__BackingField</name>
                        <newname>d</newname>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.List`1&lt;PIC.Data.CommonSearchCriterionItem&gt;</signature>
                        <name>&lt;Searches&gt;k__BackingField</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>PIC.Data.JunctionSearchCriterionItem/&lt;&gt;c__DisplayClass10</name>
                <newname>PIC.Data.JunctionSearchCriterionItem/a</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>bool(PIC.Data.CommonSearchCriterionItem)</signature>
                        <name>&lt;GetSearches&gt;b__d</name>
                        <newname>d</newname>
                    </method>
                    <method>
                        <signature>bool(PIC.Data.CommonSearchCriterionItem)</signature>
                        <name>&lt;GetSearches&gt;b__e</name>
                        <newname>c</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>string</signature>
                        <name>propertyName</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>PIC.Data.SearchModeEnum</signature>
                        <name>schMode</name>
                        <newname>b</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>PIC.Data.JunctionSearchCriterionItem/&lt;&gt;c__DisplayClass15</name>
                <newname>PIC.Data.JunctionSearchCriterionItem/b</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>bool(PIC.Data.CommonSearchCriterionItem)</signature>
                        <name>&lt;GetFirstSearch&gt;b__12</name>
                        <newname>c</newname>
                    </method>
                    <method>
                        <signature>bool(PIC.Data.CommonSearchCriterionItem)</signature>
                        <name>&lt;GetFirstSearch&gt;b__13</name>
                        <newname>b</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>string</signature>
                        <name>propertyName</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>PIC.Data.JunctionSearchCriterionItem/&lt;&gt;c__DisplayClass1a</name>
                <newname>PIC.Data.JunctionSearchCriterionItem/d</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>bool(PIC.Data.CommonSearchCriterionItem)</signature>
                        <name>&lt;GetFirstSearch&gt;b__17</name>
                        <newname>c</newname>
                    </method>
                    <method>
                        <signature>bool(PIC.Data.CommonSearchCriterionItem)</signature>
                        <name>&lt;GetFirstSearch&gt;b__18</name>
                        <newname>d</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>string</signature>
                        <name>propertyName</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>PIC.Data.SearchModeEnum</signature>
                        <name>schMode</name>
                        <newname>b</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>PIC.Data.JunctionSearchCriterionItem/&lt;&gt;c__DisplayClass2</name>
                <newname>PIC.Data.JunctionSearchCriterionItem/e</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>bool(PIC.Data.CommonSearchCriterionItem)</signature>
                        <name>&lt;RemoveSearch&gt;b__0</name>
                        <newname>b</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>string</signature>
                        <name>propertyName</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>PIC.Data.JunctionSearchCriterionItem/&lt;&gt;c__DisplayClass6</name>
                <newname>PIC.Data.JunctionSearchCriterionItem/c</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>bool(PIC.Data.CommonSearchCriterionItem)</signature>
                        <name>&lt;RemoveSearch&gt;b__4</name>
                        <newname>b</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>string[]</signature>
                        <name>propertyNames</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>PIC.Data.JunctionSearchCriterionItem/&lt;&gt;c__DisplayClassb</name>
                <newname>PIC.Data.JunctionSearchCriterionItem/f</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>bool(PIC.Data.CommonSearchCriterionItem)</signature>
                        <name>&lt;GetSearches&gt;b__8</name>
                        <newname>c</newname>
                    </method>
                    <method>
                        <signature>bool(PIC.Data.CommonSearchCriterionItem)</signature>
                        <name>&lt;GetSearches&gt;b__9</name>
                        <newname>b</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>string</signature>
                        <name>propertyName</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <arity>1</arity>
                <genericparameter sequence="0">
                    <name>T</name>
                </genericparameter>
                <name>PIC.Data.ModelMap`1</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <name>PIC.Data.NHSessionService</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.cctor</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>Dispose</name>
                    </method>
                    <method>
                        <signature>PIC.Data.NHSessionService()</signature>
                        <name>get_Instance</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>string</signature>
                        <name>DEFAULT_SESSION_KEY</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>DEFAULT_SESSIONSCOPE_KEY</name>
                    </field>
                    <field>
                        <signature>PIC.Data.NHSessionService</signature>
                        <name>nhss</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>PIC.Data.OrderCriterionItem</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(PIC.Data.OrderCriterionItem)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(string, bool)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_Ascending</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_PropertyName</name>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>set_Ascending</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_PropertyName</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>ToSQLString</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>bool</signature>
                        <name>&lt;Ascending&gt;k__BackingField</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>propertyName</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>PIC.Data.PasteAsEnum</name>
                <methodlist />
                <fieldlist>
                    <field>
                        <signature>PIC.Data.PasteAsEnum</signature>
                        <name>Child</name>
                    </field>
                    <field>
                        <signature>PIC.Data.PasteAsEnum</signature>
                        <name>Other</name>
                    </field>
                    <field>
                        <signature>PIC.Data.PasteAsEnum</signature>
                        <name>Sibling</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>value__</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>PIC.Data.PasteDataSourceEnum</name>
                <methodlist />
                <fieldlist>
                    <field>
                        <signature>PIC.Data.PasteDataSourceEnum</signature>
                        <name>Copy</name>
                    </field>
                    <field>
                        <signature>PIC.Data.PasteDataSourceEnum</signature>
                        <name>Cut</name>
                    </field>
                    <field>
                        <signature>PIC.Data.PasteDataSourceEnum</signature>
                        <name>Unknown</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>value__</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>PIC.Data.PICIdentifierGenerator</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>object(NHibernate.Engine.ISessionImplementor, object)</signature>
                        <name>Generate</name>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <name>PIC.Data.QueryBuilder</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>string[](string)</signature>
                        <name>GetColumnNames</name>
                    </method>
                    <method>
                        <signature>string(PIC.Data.SearchCriterion)</signature>
                        <name>GetSQLOrderString</name>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <name>PIC.Data.RepeatedKeyException</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(string, System.Exception)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)</signature>
                        <name>.ctor</name>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <arity>1</arity>
                <genericparameter sequence="0">
                    <name>T</name>
                </genericparameter>
                <name>PIC.Data.RuleBase`1</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(System.Collections.Generic.IList`1&lt;PIC.Data.EntityBase`1&lt;!0&gt;&gt;)</signature>
                        <name>BatchRemove</name>
                    </method>
                    <method>
                        <signature>void(System.Collections.Generic.IEnumerable`1&lt;object&gt;)</signature>
                        <name>BatchRemoveByPrimaryKeys</name>
                    </method>
                    <method>
                        <signature>!0[]()</signature>
                        <name>FindAll</name>
                    </method>
                    <method>
                        <signature>!0[](PIC.Data.SearchCriterion)</signature>
                        <name>FindAll</name>
                    </method>
                    <method>
                        <signature>!0[](PIC.Data.SearchCriterion, NHibernate.Criterion.ICriterion[])</signature>
                        <name>FindAll</name>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <name>PIC.Data.SearchCriterion</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.cctor</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>AddFTSearch</name>
                    </method>
                    <method>
                        <signature>void(System.Collections.Generic.List`1&lt;string&gt;, string)</signature>
                        <name>AddFTSearch</name>
                    </method>
                    <method>
                        <signature>void(string, object)</signature>
                        <name>AddSearch</name>
                    </method>
                    <method>
                        <signature>void(string, object, PIC.Data.SearchModeEnum)</signature>
                        <name>AddSearch</name>
                    </method>
                    <method>
                        <signature>void(string, object, PIC.Data.SearchModeEnum, System.TypeCode)</signature>
                        <name>AddSearch</name>
                    </method>
                    <method>
                        <signature>void(string, object, System.TypeCode)</signature>
                        <name>AddSearch</name>
                    </method>
                    <method>
                        <signature>void(string, PIC.Data.SingleSearchModeEnum)</signature>
                        <name>AddSearch</name>
                    </method>
                    <method>
                        <signature>void(string[], PIC.Data.SingleSearchModeEnum)</signature>
                        <name>AddSearches</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>Clear</name>
                    </method>
                    <method>
                        <arity>1</arity>
                        <signature>!!0[]()</signature>
                        <name>FindAll</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>FormatSearch</name>
                    </method>
                    <method>
                        <signature>void(PIC.Data.CommonSearchCriterionItem)</signature>
                        <name>FormatSearch</name>
                    </method>
                    <method>
                        <signature>void(PIC.Data.JunctionSearchCriterionItem)</signature>
                        <name>FormatSearch</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_AllowPaging</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_AutoOrder</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_CurrentPageIndex</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_DefaultPageSize</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_GetRecordCount</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_IsDistinct</name>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.List`1&lt;PIC.Data.OrderCriterionItem&gt;()</signature>
                        <name>get_Orders</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_PageCount</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_PageSize</name>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.List`1&lt;string&gt;()</signature>
                        <name>get_QueryFields</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_RecordCount</name>
                    </method>
                    <method>
                        <signature>PIC.Data.JunctionSearchCriterionItem()</signature>
                        <name>get_Searches</name>
                    </method>
                    <method>
                        <signature>PIC.Data.CommonSearchCriterionItem(string)</signature>
                        <name>GetFirstSearch</name>
                    </method>
                    <method>
                        <signature>PIC.Data.CommonSearchCriterionItem(string, PIC.Data.SearchModeEnum)</signature>
                        <name>GetFirstSearch</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>GetOrderString</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>GetQueryString</name>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.IList`1&lt;PIC.Data.CommonSearchCriterionItem&gt;(string)</signature>
                        <name>GetSearches</name>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.IList`1&lt;PIC.Data.CommonSearchCriterionItem&gt;(string, PIC.Data.SearchModeEnum)</signature>
                        <name>GetSearches</name>
                    </method>
                    <method>
                        <arity>1</arity>
                        <signature>!!0(string)</signature>
                        <name>GetSearchValue</name>
                    </method>
                    <method>
                        <arity>1</arity>
                        <signature>!!0(string, !!0)</signature>
                        <name>GetSearchValue</name>
                    </method>
                    <method>
                        <signature>object(string)</signature>
                        <name>GetSearchValue</name>
                    </method>
                    <method>
                        <signature>object(string, object)</signature>
                        <name>GetSearchValue</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>HasOrdered</name>
                    </method>
                    <method>
                        <signature>bool(string)</signature>
                        <name>HasOrdered</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>RemoveSearch</name>
                    </method>
                    <method>
                        <signature>void(string[])</signature>
                        <name>RemoveSearch</name>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>set_AllowPaging</name>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>set_AutoOrder</name>
                    </method>
                    <method>
                        <signature>void(int32)</signature>
                        <name>set_CurrentPageIndex</name>
                    </method>
                    <method>
                        <signature>void(int32)</signature>
                        <name>set_DefaultPageSize</name>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>set_GetRecordCount</name>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>set_IsDistinct</name>
                    </method>
                    <method>
                        <signature>void(System.Collections.Generic.List`1&lt;PIC.Data.OrderCriterionItem&gt;)</signature>
                        <name>set_Orders</name>
                    </method>
                    <method>
                        <signature>void(int32)</signature>
                        <name>set_PageSize</name>
                    </method>
                    <method>
                        <signature>void(int32)</signature>
                        <name>set_RecordCount</name>
                    </method>
                    <method>
                        <signature>void(PIC.Data.JunctionSearchCriterionItem)</signature>
                        <name>set_Searches</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>SetOrder</name>
                    </method>
                    <method>
                        <signature>void(string, bool)</signature>
                        <name>SetOrder</name>
                    </method>
                    <method>
                        <signature>void(string, object)</signature>
                        <name>SetSearch</name>
                    </method>
                    <method>
                        <signature>void(string, object, PIC.Data.SearchModeEnum)</signature>
                        <name>SetSearch</name>
                    </method>
                    <method>
                        <signature>void(string, object, PIC.Data.SearchModeEnum, System.TypeCode)</signature>
                        <name>SetSearch</name>
                    </method>
                    <method>
                        <signature>void(string, object, System.TypeCode)</signature>
                        <name>SetSearch</name>
                    </method>
                    <method>
                        <signature>void(string, PIC.Data.SingleSearchModeEnum)</signature>
                        <name>SetSearch</name>
                    </method>
                    <method>
                        <signature>void(string[], PIC.Data.SingleSearchModeEnum)</signature>
                        <name>SetSearches</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>bool</signature>
                        <name>_allowPaging</name>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>_autoOrder</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>_currentPage</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>_defaultPageSize</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>_distinct</name>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>_getRecordCount</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>_pageCount</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>_pageSize</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>_recordCount</name>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>&lt;IsDistinct&gt;k__BackingField</name>
                        <newname>d</newname>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.List`1&lt;PIC.Data.OrderCriterionItem&gt;</signature>
                        <name>&lt;Orders&gt;k__BackingField</name>
                        <newname>f</newname>
                    </field>
                    <field>
                        <signature>PIC.Data.JunctionSearchCriterionItem</signature>
                        <name>&lt;Searches&gt;k__BackingField</name>
                        <newname>e</newname>
                    </field>
                    <field>
                        <signature>System.Collections.ObjectModel.ReadOnlyCollection`1&lt;string&gt;</signature>
                        <name>AUTO_ORDER_FIELDS</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.List`1&lt;string&gt;</signature>
                        <name>queryFields</name>
                        <newname>c</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>PIC.Data.SearchCriterion/&lt;&gt;c__DisplayClass2</name>
                <newname>PIC.Data.SearchCriterion/a</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>bool(PIC.Data.OrderCriterionItem)</signature>
                        <name>&lt;SetOrder&gt;b__0</name>
                        <newname>b</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>string</signature>
                        <name>propertyName</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>PIC.Data.SearchCriterion/&lt;&gt;c__DisplayClass5</name>
                <newname>PIC.Data.SearchCriterion/b</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>bool(PIC.Data.OrderCriterionItem)</signature>
                        <name>&lt;HasOrdered&gt;b__4</name>
                        <newname>b</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>string</signature>
                        <name>propertyName</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>PIC.Data.SearchCriterionItem</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <name>PIC.Data.SearchHelper</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.cctor</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>object(object, System.TypeCode)</signature>
                        <name>ConvertToSearchValue</name>
                    </method>
                    <method>
                        <signature>string(string, int32, int32, string)</signature>
                        <name>GetPagingSQLString</name>
                    </method>
                    <method>
                        <signature>string(string, PIC.Data.SearchCriterion, string)</signature>
                        <name>GetPagingSQLString</name>
                    </method>
                    <method>
                        <signature>string(System.Data.DataTable, string[])</signature>
                        <name>GetSpecialField</name>
                    </method>
                    <method>
                        <signature>NHibernate.Criterion.ICriterion(NHibernate.Criterion.ICriterion[])</signature>
                        <name>IntersectCriterions</name>
                    </method>
                    <method>
                        <signature>NHibernate.Criterion.ICriterion(NHibernate.Criterion.ICriterion[])</signature>
                        <name>UnionCriterions</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>string[]</signature>
                        <name>CREATED_TIME_FIELD_NAMES</name>
                    </field>
                    <field>
                        <signature>string[]</signature>
                        <name>CREATER_ID_FIELD_NAMES</name>
                    </field>
                    <field>
                        <signature>string[]</signature>
                        <name>CREATER_NAME_FIELD_NAMES</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>PIC.Data.SearchModeEnum</name>
                <methodlist />
                <fieldlist>
                    <field>
                        <signature>PIC.Data.SearchModeEnum</signature>
                        <name>EndWith</name>
                    </field>
                    <field>
                        <signature>PIC.Data.SearchModeEnum</signature>
                        <name>Equal</name>
                    </field>
                    <field>
                        <signature>PIC.Data.SearchModeEnum</signature>
                        <name>GreaterThan</name>
                    </field>
                    <field>
                        <signature>PIC.Data.SearchModeEnum</signature>
                        <name>GreaterThanEqual</name>
                    </field>
                    <field>
                        <signature>PIC.Data.SearchModeEnum</signature>
                        <name>In</name>
                    </field>
                    <field>
                        <signature>PIC.Data.SearchModeEnum</signature>
                        <name>LessThan</name>
                    </field>
                    <field>
                        <signature>PIC.Data.SearchModeEnum</signature>
                        <name>LessThanEqual</name>
                    </field>
                    <field>
                        <signature>PIC.Data.SearchModeEnum</signature>
                        <name>Like</name>
                    </field>
                    <field>
                        <signature>PIC.Data.SearchModeEnum</signature>
                        <name>NotEndWith</name>
                    </field>
                    <field>
                        <signature>PIC.Data.SearchModeEnum</signature>
                        <name>NotEqual</name>
                    </field>
                    <field>
                        <signature>PIC.Data.SearchModeEnum</signature>
                        <name>NotIn</name>
                    </field>
                    <field>
                        <signature>PIC.Data.SearchModeEnum</signature>
                        <name>NotLike</name>
                    </field>
                    <field>
                        <signature>PIC.Data.SearchModeEnum</signature>
                        <name>NotStartWith</name>
                    </field>
                    <field>
                        <signature>PIC.Data.SearchModeEnum</signature>
                        <name>StartWith</name>
                    </field>
                    <field>
                        <signature>PIC.Data.SearchModeEnum</signature>
                        <name>UnSettled</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>value__</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>PIC.Data.SingleSearchModeEnum</name>
                <methodlist />
                <fieldlist>
                    <field>
                        <signature>PIC.Data.SingleSearchModeEnum</signature>
                        <name>IsEmpty</name>
                    </field>
                    <field>
                        <signature>PIC.Data.SingleSearchModeEnum</signature>
                        <name>IsNotEmpty</name>
                    </field>
                    <field>
                        <signature>PIC.Data.SingleSearchModeEnum</signature>
                        <name>IsNotNull</name>
                    </field>
                    <field>
                        <signature>PIC.Data.SingleSearchModeEnum</signature>
                        <name>IsNull</name>
                    </field>
                    <field>
                        <signature>PIC.Data.SingleSearchModeEnum</signature>
                        <name>UnSettled</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>value__</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>PIC.Data.SQLFTQueryBuilder</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>string(string)</signature>
                        <name>ProcessQueryString</name>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <name>PIC.Data.SQLFTSearchCriterionBuilderForHql</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>NHibernate.Criterion.ICriterion(PIC.Data.FTSearchCriterionItem)</signature>
                        <name>BuildCriterion</name>
                    </method>
                    <method>
                        <signature>string(PIC.Data.FTSearchCriterionItem)</signature>
                        <name>getColumnListString</name>
                        <newname>a</newname>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <arity>1</arity>
                <genericparameter sequence="0">
                    <name>T</name>
                </genericparameter>
                <name>PIC.Data.TreeNodeEntityBase`1</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>System.Nullable`1&lt;int32&gt;(!0)</signature>
                        <name>&lt;GetChildNodes&gt;b__6</name>
                        <newname>h</newname>
                    </method>
                    <method>
                        <signature>bool(!0)</signature>
                        <name>&lt;GetNextSibling&gt;b__10</name>
                        <newname>c</newname>
                    </method>
                    <method>
                        <signature>System.Nullable`1&lt;int32&gt;(!0)</signature>
                        <name>&lt;GetNextSibling&gt;b__11</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>bool(!0)</signature>
                        <name>&lt;GetNextSiblingNodes&gt;b__14</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>bool(!0)</signature>
                        <name>&lt;GetPrevSibling&gt;b__a</name>
                        <newname>f</newname>
                    </method>
                    <method>
                        <signature>System.Nullable`1&lt;int32&gt;(!0)</signature>
                        <name>&lt;GetPrevSibling&gt;b__b</name>
                        <newname>e</newname>
                    </method>
                    <method>
                        <signature>bool(!0)</signature>
                        <name>&lt;GetPrevSiblingNodes&gt;b__e</name>
                        <newname>d</newname>
                    </method>
                    <method>
                        <signature>System.Nullable`1&lt;int32&gt;(!0)</signature>
                        <name>&lt;GetSiblingNodes&gt;b__8</name>
                        <newname>g</newname>
                    </method>
                    <method>
                        <signature>int32(int32, int32)</signature>
                        <name>AdjustSortIndexByInterval</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(!0, int32)</signature>
                        <name>ChangeParent</name>
                    </method>
                    <method>
                        <signature>void(string, int32)</signature>
                        <name>ChangeParent</name>
                    </method>
                    <method>
                        <signature>void(System.Data.IDbConnection, !0, int32)</signature>
                        <name>ChangeParent</name>
                    </method>
                    <method>
                        <signature>void(int32)</signature>
                        <name>ChangePosition</name>
                    </method>
                    <method>
                        <signature>void(NHibernate.ISession, int32)</signature>
                        <name>ChangePosition</name>
                    </method>
                    <method>
                        <signature>bool(object[])</signature>
                        <name>CheckIsLeaf</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>CheckIsRoot</name>
                    </method>
                    <method>
                        <signature>void(object[])</signature>
                        <name>CheckSetIsLeaf</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>ClearChildren</name>
                    </method>
                    <method>
                        <signature>string(string, string)</signature>
                        <name>CombinePath</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(!0)</signature>
                        <name>CopyAsChild</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>CopyAsChild</name>
                    </method>
                    <method>
                        <signature>void(!0)</signature>
                        <name>CopyAsSibling</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>CopyAsSibling</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>Create</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>CreateAndFlush</name>
                    </method>
                    <method>
                        <signature>void(!0)</signature>
                        <name>CreateAsChild</name>
                    </method>
                    <method>
                        <signature>void(!0, int32)</signature>
                        <name>CreateAsChild</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>CreateAsChild</name>
                    </method>
                    <method>
                        <signature>void(string, int32)</signature>
                        <name>CreateAsChild</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>CreateAsRoot</name>
                    </method>
                    <method>
                        <signature>void(!0)</signature>
                        <name>CreateAsSibling</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>CreateAsSibling</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>Delete</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>DeleteAndFlush</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>DoCreate</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>DoDelete</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(!0, !0)</signature>
                        <name>ExchangeSiblingPosition</name>
                    </method>
                    <method>
                        <signature>void(string, string)</signature>
                        <name>ExchangeSiblingPosition</name>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.IList`1&lt;!0&gt;(System.Collections.Generic.IEnumerable`1&lt;!0&gt;)</signature>
                        <name>FilterChildNodes</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>GenerateNewID</name>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.IList`1&lt;!0&gt;()</signature>
                        <name>get_ChildNodes</name>
                    </method>
                    <method>
                        <signature>!0()</signature>
                        <name>get_FirstChild</name>
                    </method>
                    <method>
                        <signature>!0()</signature>
                        <name>get_FirstSibling</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_ID</name>
                    </method>
                    <method>
                        <signature>System.Nullable`1&lt;bool&gt;()</signature>
                        <name>get_IsLeaf</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_IsParentIDChanged</name>
                    </method>
                    <method>
                        <signature>!0()</signature>
                        <name>get_LastChild</name>
                    </method>
                    <method>
                        <signature>!0()</signature>
                        <name>get_LastSibling</name>
                    </method>
                    <method>
                        <signature>!0()</signature>
                        <name>get_NextSibling</name>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.IList`1&lt;!0&gt;()</signature>
                        <name>get_NextSiblingNodes</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_OldParentID</name>
                    </method>
                    <method>
                        <signature>!0()</signature>
                        <name>get_Parent</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_ParentID</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_Path</name>
                    </method>
                    <method>
                        <signature>char()</signature>
                        <name>get_PathDivChar</name>
                    </method>
                    <method>
                        <signature>System.Nullable`1&lt;int32&gt;()</signature>
                        <name>get_PathLevel</name>
                    </method>
                    <method>
                        <signature>!0()</signature>
                        <name>get_PrevSibling</name>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.IList`1&lt;!0&gt;()</signature>
                        <name>get_PrevSiblingNodes</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_Prop_ID</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_Prop_IsLeaf</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_Prop_ParentID</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_Prop_Path</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_Prop_PathLevel</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_Prop_SortIndex</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_RootNodeLevel</name>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.IList`1&lt;!0&gt;()</signature>
                        <name>get_SiblingNodes</name>
                    </method>
                    <method>
                        <signature>System.Nullable`1&lt;int32&gt;()</signature>
                        <name>get_SortIndex</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_SortInterval</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_SortStartIndex</name>
                    </method>
                    <method>
                        <signature>!0(int32)</signature>
                        <name>GetAncestor</name>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.IList`1&lt;!0&gt;()</signature>
                        <name>GetAncestorNodes</name>
                    </method>
                    <method>
                        <signature>!0(int32)</signature>
                        <name>GetChildByPosition</name>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.IList`1&lt;!0&gt;()</signature>
                        <name>GetChildNodes</name>
                    </method>
                    <method>
                        <signature>System.Data.DataTable(!0, PIC.Data.PasteAsEnum)</signature>
                        <name>GetCopyTable</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.IList`1&lt;!0&gt;()</signature>
                        <name>GetDescendantNodes</name>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.IList`1&lt;!0&gt;(int32)</signature>
                        <name>GetDescendantNodes</name>
                    </method>
                    <method>
                        <signature>!0()</signature>
                        <name>GetFirstChild</name>
                    </method>
                    <method>
                        <signature>!0()</signature>
                        <name>GetFirstSibling</name>
                    </method>
                    <method>
                        <signature>!0()</signature>
                        <name>GetLastChild</name>
                    </method>
                    <method>
                        <signature>!0()</signature>
                        <name>GetLastSibling</name>
                    </method>
                    <method>
                        <signature>!0()</signature>
                        <name>GetNextSibling</name>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.IList`1&lt;!0&gt;()</signature>
                        <name>GetNextSiblingNodes</name>
                    </method>
                    <method>
                        <signature>!0()</signature>
                        <name>GetParent</name>
                    </method>
                    <method>
                        <signature>!0()</signature>
                        <name>GetPrevSibling</name>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.IList`1&lt;!0&gt;()</signature>
                        <name>GetPrevSiblingNodes</name>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.IList`1&lt;!0&gt;()</signature>
                        <name>GetRoots</name>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.IList`1&lt;!0&gt;()</signature>
                        <name>GetSiblingNodes</name>
                    </method>
                    <method>
                        <signature>int32(int32)</signature>
                        <name>GetSortIndex</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(!0, int32)</signature>
                        <name>InsertAt</name>
                    </method>
                    <method>
                        <signature>void(!0)</signature>
                        <name>MoveAsChild</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>MoveAsChild</name>
                    </method>
                    <method>
                        <signature>void(!0)</signature>
                        <name>MoveAsSibling</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>MoveAsSibling</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>MoveFirst</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>MoveLast</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>MoveNext</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>MovePrev</name>
                    </method>
                    <method>
                        <signature>void(object, PIC.PICPropertyChangedEventArgs)</signature>
                        <name>OnPropertyChanged</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>Refresh</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>RefreshChildNodes</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>RefreshParent</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>RefreshSiblingNodes</name>
                    </method>
                    <method>
                        <signature>void(string, int32)</signature>
                        <name>RefreshStructureInfo</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(System.Nullable`1&lt;bool&gt;)</signature>
                        <name>set_IsLeaf</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_ParentID</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_Path</name>
                    </method>
                    <method>
                        <signature>void(System.Nullable`1&lt;int32&gt;)</signature>
                        <name>set_PathLevel</name>
                    </method>
                    <method>
                        <signature>void(System.Nullable`1&lt;int32&gt;)</signature>
                        <name>set_SortIndex</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>Update</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>UpdateAndFlush</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.Collections.Generic.IList`1&lt;!0&gt;</signature>
                        <name>_ChildNodes</name>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>_IsParentIDChanged</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>_OldParentID</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>!0</signature>
                        <name>_Parent</name>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.IList`1&lt;!0&gt;</signature>
                        <name>_SiblingNodes</name>
                    </field>
                    <field>
                        <signature>System.Nullable`1&lt;bool&gt;</signature>
                        <name>&lt;IsLeaf&gt;k__BackingField</name>
                        <newname>g</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>&lt;ParentID&gt;k__BackingField</name>
                        <newname>c</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>&lt;Path&gt;k__BackingField</name>
                        <newname>d</newname>
                    </field>
                    <field>
                        <signature>System.Nullable`1&lt;int32&gt;</signature>
                        <name>&lt;PathLevel&gt;k__BackingField</name>
                        <newname>e</newname>
                    </field>
                    <field>
                        <signature>System.Nullable`1&lt;int32&gt;</signature>
                        <name>&lt;SortIndex&gt;k__BackingField</name>
                        <newname>f</newname>
                    </field>
                    <field>
                        <signature>System.Func`2&lt;!0,System.Nullable`1&lt;int32&gt;&gt;</signature>
                        <name>CS$&lt;&gt;9__CachedAnonymousMethodDelegate13</name>
                        <newname>k</newname>
                    </field>
                    <field>
                        <signature>System.Func`2&lt;!0,System.Nullable`1&lt;int32&gt;&gt;</signature>
                        <name>CS$&lt;&gt;9__CachedAnonymousMethodDelegate7</name>
                        <newname>h</newname>
                    </field>
                    <field>
                        <signature>System.Func`2&lt;!0,System.Nullable`1&lt;int32&gt;&gt;</signature>
                        <name>CS$&lt;&gt;9__CachedAnonymousMethodDelegate9</name>
                        <newname>i</newname>
                    </field>
                    <field>
                        <signature>System.Func`2&lt;!0,System.Nullable`1&lt;int32&gt;&gt;</signature>
                        <name>CS$&lt;&gt;9__CachedAnonymousMethodDelegated</name>
                        <newname>j</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <arity>1</arity>
                <genericparameter sequence="0">
                    <name>T</name>
                </genericparameter>
                <name>PIC.Data.TreeNodeEntityBase`1/&lt;&gt;c__DisplayClass18</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>bool(!0)</signature>
                        <name>&lt;FilterChildNodes&gt;b__16</name>
                        <newname>b</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>!0</signature>
                        <name>tnode</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <arity>1</arity>
                <genericparameter sequence="0">
                    <name>T</name>
                </genericparameter>
                <name>PIC.Data.TreeNodeEntityBase`1/&lt;&gt;c__DisplayClass4</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>bool(!0)</signature>
                        <name>&lt;GetChildByPosition&gt;b__0</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>bool(!0)</signature>
                        <name>&lt;GetChildByPosition&gt;b__1</name>
                        <newname>c</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>int32</signature>
                        <name>position</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>PIC.Data.TreeNodeEntityBase`1/&lt;&gt;z__Aspects</name>
                <newname>PIC.Data.TreeNodeEntityBase`1/a</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.cctor</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>PIC.Data.ActiveRecordTransactionAttribute</signature>
                        <name>a16</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>PIC.Data.ActiveRecordTransactionAttribute</signature>
                        <name>a17</name>
                        <newname>d</newname>
                    </field>
                    <field>
                        <signature>PIC.Data.ActiveRecordTransactionAttribute</signature>
                        <name>a18</name>
                        <newname>f</newname>
                    </field>
                    <field>
                        <signature>PIC.Data.ActiveRecordTransactionAttribute</signature>
                        <name>a19</name>
                        <newname>h</newname>
                    </field>
                    <field>
                        <signature>PIC.Data.ActiveRecordTransactionAttribute</signature>
                        <name>a20</name>
                        <newname>j</newname>
                    </field>
                    <field>
                        <signature>PIC.Data.ActiveRecordTransactionAttribute</signature>
                        <name>a21</name>
                        <newname>l</newname>
                    </field>
                    <field>
                        <signature>System.Reflection.MethodBase</signature>
                        <name>m1</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>System.Reflection.MethodBase</signature>
                        <name>m11</name>
                        <newname>k</newname>
                    </field>
                    <field>
                        <signature>System.Reflection.MethodBase</signature>
                        <name>m3</name>
                        <newname>c</newname>
                    </field>
                    <field>
                        <signature>System.Reflection.MethodBase</signature>
                        <name>m5</name>
                        <newname>e</newname>
                    </field>
                    <field>
                        <signature>System.Reflection.MethodBase</signature>
                        <name>m7</name>
                        <newname>g</newname>
                    </field>
                    <field>
                        <signature>System.Reflection.MethodBase</signature>
                        <name>m9</name>
                        <newname>i</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <arity>1</arity>
                <genericparameter sequence="0">
                    <name>T</name>
                </genericparameter>
                <name>PIC.Data.TreeNodeEntityBaseV1`1</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>CheckIsLeaf</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>CheckSetIsLeafProperty</name>
                    </method>
                    <method>
                        <signature>void(!0)</signature>
                        <name>CreateAsSib</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>CreateAsSib</name>
                    </method>
                    <method>
                        <signature>void(!0)</signature>
                        <name>CreateAsSub</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>CreateAsSub</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>CreateAsTop</name>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.IList`1&lt;!0&gt;()</signature>
                        <name>get_Children</name>
                    </method>
                    <method>
                        <signature>!0()</signature>
                        <name>get_FirstChild</name>
                    </method>
                    <method>
                        <signature>System.Nullable`1&lt;bool&gt;()</signature>
                        <name>get_IsLeaf</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_IsParentIDChanged</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_IsTop</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_OldParentID</name>
                    </method>
                    <method>
                        <signature>!0()</signature>
                        <name>get_Parent</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_ParentID</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_Path</name>
                    </method>
                    <method>
                        <signature>char()</signature>
                        <name>get_PathDivChar</name>
                    </method>
                    <method>
                        <signature>System.Nullable`1&lt;int32&gt;()</signature>
                        <name>get_PathLevel</name>
                    </method>
                    <method>
                        <signature>!0[]()</signature>
                        <name>GetSubs</name>
                    </method>
                    <method>
                        <signature>!0[](int32)</signature>
                        <name>GetSubs</name>
                    </method>
                    <method>
                        <signature>void(object, PIC.PICPropertyChangedEventArgs)</signature>
                        <name>OnPropertyChanged</name>
                    </method>
                    <method>
                        <signature>void(System.Nullable`1&lt;bool&gt;)</signature>
                        <name>set_IsLeaf</name>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>set_IsTop</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_ParentID</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_Path</name>
                    </method>
                    <method>
                        <signature>void(System.Nullable`1&lt;int32&gt;)</signature>
                        <name>set_PathLevel</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.Collections.Generic.IList`1&lt;!0&gt;</signature>
                        <name>_Children</name>
                    </field>
                    <field>
                        <signature>!0</signature>
                        <name>_FirstChild</name>
                    </field>
                    <field>
                        <signature>System.Nullable`1&lt;bool&gt;</signature>
                        <name>_IsLeaf</name>
                    </field>
                    <field>
                        <signature>!0</signature>
                        <name>_Parent</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>_parentID</name>
                        <newname>c</newname>
                    </field>
                    <field>
                        <signature>System.Nullable`1&lt;bool&gt;</signature>
                        <name>&lt;IsLeaf&gt;k__BackingField</name>
                        <newname>d</newname>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>isParentIDChanged</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>oldParentID</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>Prop_IsLeaf</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>Prop_ParentID</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>Prop_Path</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>Prop_PathLevel</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>Prop_SortIndex</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <arity>1</arity>
                <genericparameter sequence="0">
                    <name>T</name>
                </genericparameter>
                <name>PIC.DTreeEventArgs`1</name>
                <methodlist>
                    <method>
                        <signature>void(PIC.DTreeNode`1&lt;!0&gt;, PIC.ENodeEvent, int32)</signature>
                        <name>.ctor</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>PIC.ENodeEvent</signature>
                        <name>Change</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>Index</name>
                    </field>
                    <field>
                        <signature>PIC.DTreeNode`1&lt;!0&gt;</signature>
                        <name>Node</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <arity>1</arity>
                <genericparameter sequence="0">
                    <name>T</name>
                </genericparameter>
                <name>PIC.DTreeNode`1</name>
                <methodlist>
                    <method>
                        <signature>void(!0)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(!0, PIC.DTreeNode`1&lt;!0&gt;)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>string(PIC.DTreeNode`1&lt;!0&gt;)</signature>
                        <name>&lt;GetNodePathAsString&gt;b__0</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>PIC.DTreeNode`1&lt;!0&gt;()</signature>
                        <name>Detach</name>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.IEnumerable`1&lt;!0&gt;()</signature>
                        <name>get_BreadthFirstEnumerator</name>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.IEnumerable`1&lt;PIC.DTreeNode`1&lt;!0&gt;&gt;()</signature>
                        <name>get_BreadthFirstNodeEnumerator</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_Depth</name>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.IEnumerable`1&lt;!0&gt;()</signature>
                        <name>get_DepthFirstEnumerator</name>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.IEnumerable`1&lt;PIC.DTreeNode`1&lt;!0&gt;&gt;()</signature>
                        <name>get_DepthFirstNodeEnumerator</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_HasChildren</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_IsRoot</name>
                    </method>
                    <method>
                        <signature>PIC.DTreeNodeCollection`1&lt;!0&gt;()</signature>
                        <name>get_Nodes</name>
                    </method>
                    <method>
                        <signature>PIC.DTreeNode`1&lt;!0&gt;()</signature>
                        <name>get_Parent</name>
                    </method>
                    <method>
                        <signature>PIC.DTreeRoot`1&lt;!0&gt;()</signature>
                        <name>get_Root</name>
                    </method>
                    <method>
                        <signature>PIC.DTreeNodeCollection`1&lt;!0&gt;()</signature>
                        <name>get_Siblings</name>
                    </method>
                    <method>
                        <signature>!0()</signature>
                        <name>get_Value</name>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.IList`1&lt;!0&gt;()</signature>
                        <name>GetElementPath</name>
                    </method>
                    <method>
                        <signature>int32[]()</signature>
                        <name>GetIndexPath</name>
                    </method>
                    <method>
                        <signature>int32[](PIC.DTreeNode`1&lt;!0&gt;)</signature>
                        <name>GetIndexPathTo</name>
                    </method>
                    <method>
                        <signature>PIC.DTreeNode`1&lt;!0&gt;(int32)</signature>
                        <name>GetNodeAt</name>
                    </method>
                    <method>
                        <signature>PIC.DTreeNode`1&lt;!0&gt;(int32[])</signature>
                        <name>GetNodeAt</name>
                    </method>
                    <method>
                        <signature>PIC.DTreeNode`1&lt;!0&gt;(System.Collections.Generic.IEnumerable`1&lt;int32&gt;)</signature>
                        <name>GetNodeAt</name>
                    </method>
                    <method>
                        <signature>System.Collections.IList()</signature>
                        <name>GetNodePath</name>
                    </method>
                    <method>
                        <signature>string(char)</signature>
                        <name>GetNodePathAsString</name>
                    </method>
                    <method>
                        <signature>string(char, PIC.NodeToString`1&lt;!0&gt;)</signature>
                        <name>GetNodePathAsString</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>InternalDetach</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(PIC.DTreeNode`1&lt;!0&gt;)</signature>
                        <name>InternalSetParent</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>bool(PIC.DTreeNode`1&lt;!0&gt;)</signature>
                        <name>IsAncestorOf</name>
                    </method>
                    <method>
                        <signature>bool(PIC.DTreeNode`1&lt;!0&gt;)</signature>
                        <name>IsChildOf</name>
                    </method>
                    <method>
                        <signature>bool(PIC.DTreeNode`1&lt;!0&gt;)</signature>
                        <name>IsInLineWith</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>Remove</name>
                    </method>
                    <method>
                        <signature>void(!0)</signature>
                        <name>set_Value</name>
                    </method>
                    <method>
                        <signature>void(PIC.DTreeRoot`1&lt;!0&gt;)</signature>
                        <name>SetRootLink</name>
                        <newname>a</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>PIC.NodeToString`1&lt;!0&gt;</signature>
                        <name>CS$&lt;&gt;9__CachedAnonymousMethodDelegate1</name>
                        <newname>e</newname>
                    </field>
                    <field>
                        <signature>PIC.DTreeNodeCollection`1&lt;!0&gt;</signature>
                        <name>mNodes</name>
                        <newname>c</newname>
                    </field>
                    <field>
                        <signature>PIC.DTreeNode`1&lt;!0&gt;</signature>
                        <name>mParent</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>PIC.DTreeRoot`1&lt;!0&gt;</signature>
                        <name>mRoot</name>
                        <newname>d</newname>
                    </field>
                    <field>
                        <signature>!0</signature>
                        <name>mValue</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <arity>1</arity>
                <genericparameter sequence="0">
                    <name>T</name>
                </genericparameter>
                <name>PIC.DTreeNode`1/&lt;get_BreadthFirstEnumerator&gt;d__14</name>
                <methodlist>
                    <method>
                        <signature>void(int32)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>&lt;&gt;m__Finally17</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>MoveNext</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.IEnumerator`1&lt;!0&gt;()</signature>
                        <name>System.Collections.Generic.IEnumerable&lt;T&gt;.GetEnumerator</name>
                        <newname>i</newname>
                    </method>
                    <method>
                        <signature>!0()</signature>
                        <name>System.Collections.Generic.IEnumerator&lt;T&gt;.get_Current</name>
                        <newname>j</newname>
                    </method>
                    <method>
                        <signature>System.Collections.IEnumerator()</signature>
                        <name>System.Collections.IEnumerable.GetEnumerator</name>
                        <newname>c</newname>
                    </method>
                    <method>
                        <signature>object()</signature>
                        <name>System.Collections.IEnumerator.get_Current</name>
                        <newname>g</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>System.Collections.IEnumerator.Reset</name>
                        <newname>k</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>System.IDisposable.Dispose</name>
                        <newname>h</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>int32</signature>
                        <name>&lt;&gt;1__state</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>!0</signature>
                        <name>&lt;&gt;2__current</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>PIC.DTreeNode`1&lt;!0&gt;</signature>
                        <name>&lt;&gt;4__this</name>
                        <newname>d</newname>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.IEnumerator`1&lt;PIC.DTreeNode`1&lt;!0&gt;&gt;</signature>
                        <name>&lt;&gt;7__wrap16</name>
                        <newname>f</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>&lt;&gt;l__initialThreadId</name>
                        <newname>c</newname>
                    </field>
                    <field>
                        <signature>PIC.DTreeNode`1&lt;!0&gt;</signature>
                        <name>&lt;node&gt;5__15</name>
                        <newname>e</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <arity>1</arity>
                <genericparameter sequence="0">
                    <name>T</name>
                </genericparameter>
                <name>PIC.DTreeNode`1/&lt;get_BreadthFirstNodeEnumerator&gt;d__f</name>
                <methodlist>
                    <method>
                        <signature>void(int32)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>MoveNext</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.IEnumerator`1&lt;PIC.DTreeNode`1&lt;!0&gt;&gt;()</signature>
                        <name>System.Collections.Generic.IEnumerable&lt;PIC.DTreeNode&lt;T&gt;&gt;.GetEnumerator</name>
                        <newname>c</newname>
                    </method>
                    <method>
                        <signature>PIC.DTreeNode`1&lt;!0&gt;()</signature>
                        <name>System.Collections.Generic.IEnumerator&lt;PIC.DTreeNode&lt;T&gt;&gt;.get_Current</name>
                        <newname>g</newname>
                    </method>
                    <method>
                        <signature>System.Collections.IEnumerator()</signature>
                        <name>System.Collections.IEnumerable.GetEnumerator</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>object()</signature>
                        <name>System.Collections.IEnumerator.get_Current</name>
                        <newname>i</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>System.Collections.IEnumerator.Reset</name>
                        <newname>j</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>System.IDisposable.Dispose</name>
                        <newname>h</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>int32</signature>
                        <name>&lt;&gt;1__state</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>PIC.DTreeNode`1&lt;!0&gt;</signature>
                        <name>&lt;&gt;2__current</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>PIC.DTreeNode`1&lt;!0&gt;</signature>
                        <name>&lt;&gt;4__this</name>
                        <newname>d</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>&lt;&gt;l__initialThreadId</name>
                        <newname>c</newname>
                    </field>
                    <field>
                        <signature>PIC.DTreeNode`1&lt;!0&gt;</signature>
                        <name>&lt;node&gt;5__11</name>
                        <newname>f</newname>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.Queue`1&lt;PIC.DTreeNode`1&lt;!0&gt;&gt;</signature>
                        <name>&lt;todo&gt;5__10</name>
                        <newname>e</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <arity>1</arity>
                <genericparameter sequence="0">
                    <name>T</name>
                </genericparameter>
                <name>PIC.DTreeNode`1/&lt;get_DepthFirstEnumerator&gt;d__2</name>
                <methodlist>
                    <method>
                        <signature>void(int32)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>&lt;&gt;m__Finally5</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>MoveNext</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.IEnumerator`1&lt;!0&gt;()</signature>
                        <name>System.Collections.Generic.IEnumerable&lt;T&gt;.GetEnumerator</name>
                        <newname>i</newname>
                    </method>
                    <method>
                        <signature>!0()</signature>
                        <name>System.Collections.Generic.IEnumerator&lt;T&gt;.get_Current</name>
                        <newname>j</newname>
                    </method>
                    <method>
                        <signature>System.Collections.IEnumerator()</signature>
                        <name>System.Collections.IEnumerable.GetEnumerator</name>
                        <newname>c</newname>
                    </method>
                    <method>
                        <signature>object()</signature>
                        <name>System.Collections.IEnumerator.get_Current</name>
                        <newname>g</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>System.Collections.IEnumerator.Reset</name>
                        <newname>k</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>System.IDisposable.Dispose</name>
                        <newname>h</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>int32</signature>
                        <name>&lt;&gt;1__state</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>!0</signature>
                        <name>&lt;&gt;2__current</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>PIC.DTreeNode`1&lt;!0&gt;</signature>
                        <name>&lt;&gt;4__this</name>
                        <newname>d</newname>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.IEnumerator`1&lt;PIC.DTreeNode`1&lt;!0&gt;&gt;</signature>
                        <name>&lt;&gt;7__wrap4</name>
                        <newname>f</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>&lt;&gt;l__initialThreadId</name>
                        <newname>c</newname>
                    </field>
                    <field>
                        <signature>PIC.DTreeNode`1&lt;!0&gt;</signature>
                        <name>&lt;node&gt;5__3</name>
                        <newname>e</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <arity>1</arity>
                <genericparameter sequence="0">
                    <name>T</name>
                </genericparameter>
                <name>PIC.DTreeNode`1/&lt;get_DepthFirstNodeEnumerator&gt;d__8</name>
                <methodlist>
                    <method>
                        <signature>void(int32)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>&lt;&gt;m__Finallyc</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>MoveNext</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.IEnumerator`1&lt;PIC.DTreeNode`1&lt;!0&gt;&gt;()</signature>
                        <name>System.Collections.Generic.IEnumerable&lt;PIC.DTreeNode&lt;T&gt;&gt;.GetEnumerator</name>
                        <newname>h</newname>
                    </method>
                    <method>
                        <signature>PIC.DTreeNode`1&lt;!0&gt;()</signature>
                        <name>System.Collections.Generic.IEnumerator&lt;PIC.DTreeNode&lt;T&gt;&gt;.get_Current</name>
                        <newname>i</newname>
                    </method>
                    <method>
                        <signature>System.Collections.IEnumerator()</signature>
                        <name>System.Collections.IEnumerable.GetEnumerator</name>
                        <newname>c</newname>
                    </method>
                    <method>
                        <signature>object()</signature>
                        <name>System.Collections.IEnumerator.get_Current</name>
                        <newname>k</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>System.Collections.IEnumerator.Reset</name>
                        <newname>l</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>System.IDisposable.Dispose</name>
                        <newname>j</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>int32</signature>
                        <name>&lt;&gt;1__state</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>PIC.DTreeNode`1&lt;!0&gt;</signature>
                        <name>&lt;&gt;2__current</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>PIC.DTreeNode`1&lt;!0&gt;</signature>
                        <name>&lt;&gt;4__this</name>
                        <newname>d</newname>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.IEnumerator`1&lt;PIC.DTreeNode`1&lt;!0&gt;&gt;</signature>
                        <name>&lt;&gt;7__wrapb</name>
                        <newname>g</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>&lt;&gt;l__initialThreadId</name>
                        <newname>c</newname>
                    </field>
                    <field>
                        <signature>PIC.DTreeNode`1&lt;!0&gt;</signature>
                        <name>&lt;child&gt;5__9</name>
                        <newname>e</newname>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.IEnumerator`1&lt;PIC.DTreeNode`1&lt;!0&gt;&gt;</signature>
                        <name>&lt;childEnum&gt;5__a</name>
                        <newname>f</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <arity>1</arity>
                <genericparameter sequence="0">
                    <name>T</name>
                </genericparameter>
                <name>PIC.DTreeNodeCollection`1</name>
                <methodlist>
                    <method>
                        <signature>void(PIC.DTreeNode`1&lt;!0&gt;)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>PIC.DTreeNode`1&lt;!0&gt;(!0)</signature>
                        <name>Add</name>
                    </method>
                    <method>
                        <signature>void(PIC.DTreeNode`1&lt;!0&gt;)</signature>
                        <name>Add</name>
                    </method>
                    <method>
                        <signature>void(!0[])</signature>
                        <name>AddRange</name>
                    </method>
                    <method>
                        <signature>void(System.Collections.Generic.IEnumerable`1&lt;!0&gt;)</signature>
                        <name>AddRange</name>
                    </method>
                    <method>
                        <signature>bool(PIC.DTreeNode`1&lt;!0&gt;)</signature>
                        <name>Contains</name>
                    </method>
                    <method>
                        <signature>void(PIC.DTreeNode`1&lt;!0&gt;[], int32)</signature>
                        <name>CopyTo</name>
                    </method>
                    <method>
                        <signature>PIC.DTreeNode`1&lt;!0&gt;(int32)</signature>
                        <name>get_Item</name>
                    </method>
                    <method>
                        <signature>PIC.DTreeNode`1&lt;!0&gt;()</signature>
                        <name>get_Owner</name>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.IEnumerator`1&lt;PIC.DTreeNode`1&lt;!0&gt;&gt;()</signature>
                        <name>GetEnumerator</name>
                    </method>
                    <method>
                        <signature>int32(PIC.DTreeNode`1&lt;!0&gt;)</signature>
                        <name>IndexOf</name>
                    </method>
                    <method>
                        <signature>void(int32, PIC.DTreeNode`1&lt;!0&gt;)</signature>
                        <name>Insert</name>
                    </method>
                    <method>
                        <signature>PIC.DTreeNode`1&lt;!0&gt;(PIC.DTreeNode`1&lt;!0&gt;, !0)</signature>
                        <name>InsertAfter</name>
                    </method>
                    <method>
                        <signature>PIC.DTreeNode`1&lt;!0&gt;(int32, !0)</signature>
                        <name>InsertAt</name>
                    </method>
                    <method>
                        <signature>PIC.DTreeNode`1&lt;!0&gt;(PIC.DTreeNode`1&lt;!0&gt;, !0)</signature>
                        <name>InsertBefore</name>
                    </method>
                    <method>
                        <signature>void(int32, System.Collections.Generic.IEnumerable`1&lt;!0&gt;)</signature>
                        <name>InsertRangeAt</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>OnClear</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>OnClearComplete</name>
                    </method>
                    <method>
                        <signature>void(int32, object)</signature>
                        <name>OnInsert</name>
                    </method>
                    <method>
                        <signature>void(int32, object)</signature>
                        <name>OnRemoveComplete</name>
                    </method>
                    <method>
                        <signature>void(int32, object, object)</signature>
                        <name>OnSet</name>
                    </method>
                    <method>
                        <signature>void(int32, object, object)</signature>
                        <name>OnSetComplete</name>
                    </method>
                    <method>
                        <signature>void(object)</signature>
                        <name>OnValidate</name>
                    </method>
                    <method>
                        <signature>void(PIC.DTreeNode`1&lt;!0&gt;)</signature>
                        <name>Remove</name>
                    </method>
                    <method>
                        <signature>void(PIC.ENodeEvent, int32)</signature>
                        <name>SendOwnerNodeChanged</name>
                    </method>
                    <method>
                        <signature>void(int32, PIC.DTreeNode`1&lt;!0&gt;)</signature>
                        <name>set_Item</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>PIC.DTreeNode`1&lt;!0&gt;</signature>
                        <name>mOwner</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <arity>1</arity>
                <genericparameter sequence="0">
                    <name>T</name>
                </genericparameter>
                <name>PIC.DTreeNodeCollection`1/&lt;GetEnumerator&gt;d__0</name>
                <methodlist>
                    <method>
                        <signature>void(int32)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>&lt;&gt;m__Finally4</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>MoveNext</name>
                        <newname>i</newname>
                    </method>
                    <method>
                        <signature>PIC.DTreeNode`1&lt;!0&gt;()</signature>
                        <name>System.Collections.Generic.IEnumerator&lt;PIC.DTreeNode&lt;T&gt;&gt;.get_Current</name>
                        <newname>h</newname>
                    </method>
                    <method>
                        <signature>object()</signature>
                        <name>System.Collections.IEnumerator.get_Current</name>
                        <newname>g</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>System.Collections.IEnumerator.Reset</name>
                        <newname>j</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>System.IDisposable.Dispose</name>
                        <newname>b</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>int32</signature>
                        <name>&lt;&gt;1__state</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>PIC.DTreeNode`1&lt;!0&gt;</signature>
                        <name>&lt;&gt;2__current</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>PIC.DTreeNodeCollection`1&lt;!0&gt;</signature>
                        <name>&lt;&gt;4__this</name>
                        <newname>c</newname>
                    </field>
                    <field>
                        <signature>System.Collections.IEnumerator</signature>
                        <name>&lt;&gt;7__wrap2</name>
                        <newname>e</newname>
                    </field>
                    <field>
                        <signature>System.IDisposable</signature>
                        <name>&lt;&gt;7__wrap3</name>
                        <newname>f</newname>
                    </field>
                    <field>
                        <signature>PIC.DTreeNode`1&lt;!0&gt;</signature>
                        <name>&lt;node&gt;5__1</name>
                        <newname>d</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <arity>1</arity>
                <genericparameter sequence="0">
                    <name>T</name>
                </genericparameter>
                <name>PIC.DTreeRoot`1</name>
                <methodlist>
                    <method>
                        <signature>void(PIC.DTreeNode`1&lt;!0&gt;)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(System.EventHandler)</signature>
                        <name>add_OnNodeChanged</name>
                    </method>
                    <method>
                        <signature>void(System.EventHandler)</signature>
                        <name>add_OnValueAccessed</name>
                    </method>
                    <method>
                        <signature>void(System.EventHandler)</signature>
                        <name>add_OnValueChanged</name>
                    </method>
                    <method>
                        <signature>PIC.DTreeNode`1&lt;!0&gt;()</signature>
                        <name>get_RootNode</name>
                    </method>
                    <method>
                        <signature>void(System.EventHandler)</signature>
                        <name>remove_OnNodeChanged</name>
                    </method>
                    <method>
                        <signature>void(System.EventHandler)</signature>
                        <name>remove_OnValueAccessed</name>
                    </method>
                    <method>
                        <signature>void(System.EventHandler)</signature>
                        <name>remove_OnValueChanged</name>
                    </method>
                    <method>
                        <signature>void(PIC.DTreeNode`1&lt;!0&gt;, PIC.ENodeEvent, int32)</signature>
                        <name>SendNodeChanged</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(PIC.DTreeNode`1&lt;!0&gt;)</signature>
                        <name>SendValueAccessed</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>void(PIC.DTreeNode`1&lt;!0&gt;)</signature>
                        <name>SendValueChanged</name>
                        <newname>a</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>PIC.DTreeNode`1&lt;!0&gt;</signature>
                        <name>mRoot</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>System.EventHandler</signature>
                        <name>OnNodeChanged</name>
                        <newname>d</newname>
                    </field>
                    <field>
                        <signature>System.EventHandler</signature>
                        <name>OnValueAccessed</name>
                        <newname>c</newname>
                    </field>
                    <field>
                        <signature>System.EventHandler</signature>
                        <name>OnValueChanged</name>
                        <newname>b</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>PIC.EasyDictionary</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(System.Collections.Generic.IDictionary`2&lt;string,object&gt;)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(System.Collections.Generic.IList`1&lt;PIC.EasyDictionary&gt;)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(System.Collections.Generic.IList`1&lt;PIC.EasyDictionary&gt;, string, string)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(System.Data.DataTable)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(System.Data.DataTable, string, string)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <arity>1</arity>
                        <signature>!!0(string)</signature>
                        <name>Get</name>
                    </method>
                    <method>
                        <arity>1</arity>
                        <signature>!!0(string, !!0)</signature>
                        <name>Get</name>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <arity>2</arity>
                <genericparameter sequence="0">
                    <name>TKey</name>
                </genericparameter>
                <genericparameter sequence="1">
                    <name>TValue</name>
                </genericparameter>
                <name>PIC.EasyDictionary`2</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(System.Collections.Generic.IDictionary`2&lt;!0,!1&gt;)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>!1(!0)</signature>
                        <name>Get</name>
                    </method>
                    <method>
                        <signature>!1(!0, !1)</signature>
                        <name>Get</name>
                    </method>
                    <method>
                        <signature>!1(!0)</signature>
                        <name>get_Item</name>
                    </method>
                    <method>
                        <signature>!1(!0, !1)</signature>
                        <name>get_Item</name>
                    </method>
                    <method>
                        <signature>void(!0, !1)</signature>
                        <name>Set</name>
                    </method>
                    <method>
                        <signature>void(!0, !1)</signature>
                        <name>set_Item</name>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <name>PIC.ENodeEvent</name>
                <methodlist />
                <fieldlist>
                    <field>
                        <signature>PIC.ENodeEvent</signature>
                        <name>ChildAdded</name>
                    </field>
                    <field>
                        <signature>PIC.ENodeEvent</signature>
                        <name>ChildOrderChanged</name>
                    </field>
                    <field>
                        <signature>PIC.ENodeEvent</signature>
                        <name>ChildRemoved</name>
                    </field>
                    <field>
                        <signature>PIC.ENodeEvent</signature>
                        <name>ChildsCleared</name>
                    </field>
                    <field>
                        <signature>PIC.ENodeEvent</signature>
                        <name>NodeChanged</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>value__</name>
                    </field>
                    <field>
                        <signature>PIC.ENodeEvent</signature>
                        <name>ValueAccessed</name>
                    </field>
                    <field>
                        <signature>PIC.ENodeEvent</signature>
                        <name>ValueChanged</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>PIC.ICodeGenerator</name>
                <methodlist>
                    <method>
                        <signature>string()</signature>
                        <name>Generate</name>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <name>PIC.IOHelper</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(unsigned int8[], unsigned int8[], int64, int64)</signature>
                        <name>CopyBytes</name>
                    </method>
                    <method>
                        <signature>unsigned int8[](System.IO.Stream)</signature>
                        <name>ReadStream</name>
                    </method>
                    <method>
                        <signature>unsigned int8[](System.IO.Stream, int32)</signature>
                        <name>ReadStream</name>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <name>PIC.IPICNotifyPropertyChanged</name>
                <methodlist>
                    <method>
                        <signature>void(PIC.PICPropertyChangedEventHandler)</signature>
                        <name>add_PICPropertyChanged</name>
                    </method>
                    <method>
                        <signature>void(PIC.PICPropertyChangedEventHandler)</signature>
                        <name>remove_PICPropertyChanged</name>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <name>PIC.IServiceBus</name>
                <methodlist />
                <fieldlist />
            </type>
            <type>
                <name>PIC.IServiceMessage</name>
                <methodlist>
                    <method>
                        <signature>PIC.MessageType()</signature>
                        <name>get_MessageType</name>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <name>PIC.JsonHelper</name>
                <methodlist>
                    <method>
                        <signature>string(object)</signature>
                        <name>GetJsonString</name>
                    </method>
                    <method>
                        <signature>string(System.Data.DataTable)</signature>
                        <name>GetJsonStringFromDataTable</name>
                    </method>
                    <method>
                        <arity>1</arity>
                        <signature>!!0(string)</signature>
                        <name>GetObject</name>
                    </method>
                    <method>
                        <arity>1</arity>
                        <signature>System.Collections.Generic.IList`1&lt;!!0&gt;(object)</signature>
                        <name>GetObjectList</name>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <name>PIC.KeyValuePairList</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <arity>2</arity>
                <genericparameter sequence="0">
                    <name>TKey</name>
                </genericparameter>
                <genericparameter sequence="1">
                    <name>TValue</name>
                </genericparameter>
                <name>PIC.KeyValuePairList`2</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <name>PIC.Message</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <arity>1</arity>
                <genericparameter sequence="0">
                    <name>T</name>
                </genericparameter>
                <name>PIC.Message`1</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>!0()</signature>
                        <name>get_Content</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_Lable</name>
                    </method>
                    <method>
                        <signature>PIC.MessageType()</signature>
                        <name>get_MessageType</name>
                    </method>
                    <method>
                        <signature>void(!0)</signature>
                        <name>set_Content</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_Lable</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>!0</signature>
                        <name>content</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>lable</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>PIC.MessageException</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(PIC.Message)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>PIC.Message()</signature>
                        <name>get_Message</name>
                    </method>
                    <method>
                        <signature>void(PIC.Message)</signature>
                        <name>set_Message</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>PIC.Message</signature>
                        <name>_Message</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>PIC.MessageType</name>
                <methodlist />
                <fieldlist>
                    <field>
                        <signature>PIC.MessageType</signature>
                        <name>Callback</name>
                    </field>
                    <field>
                        <signature>PIC.MessageType</signature>
                        <name>Data</name>
                    </field>
                    <field>
                        <signature>PIC.MessageType</signature>
                        <name>Exception</name>
                    </field>
                    <field>
                        <signature>PIC.MessageType</signature>
                        <name>Operation</name>
                    </field>
                    <field>
                        <signature>PIC.MessageType</signature>
                        <name>Other</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>value__</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <arity>1</arity>
                <genericparameter sequence="0">
                    <name>T</name>
                </genericparameter>
                <name>PIC.NodeToString`1</name>
                <methodlist>
                    <method>
                        <signature>void(object, native int)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>System.IAsyncResult(PIC.DTreeNode`1&lt;!0&gt;, System.AsyncCallback, object)</signature>
                        <name>BeginInvoke</name>
                    </method>
                    <method>
                        <signature>string(System.IAsyncResult)</signature>
                        <name>EndInvoke</name>
                    </method>
                    <method>
                        <signature>string(PIC.DTreeNode`1&lt;!0&gt;)</signature>
                        <name>Invoke</name>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <name>PIC.ObjectHelper</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <arity>1</arity>
                        <signature>!!0(object)</signature>
                        <name>ConvertValue</name>
                    </method>
                    <method>
                        <arity>1</arity>
                        <signature>!!0(object, !!0)</signature>
                        <name>ConvertValue</name>
                    </method>
                    <method>
                        <arity>1</arity>
                        <signature>!!0(string)</signature>
                        <name>CreateInstance</name>
                    </method>
                    <method>
                        <arity>1</arity>
                        <signature>!!0(string, string, string)</signature>
                        <name>CreateInstance</name>
                    </method>
                    <method>
                        <arity>1</arity>
                        <signature>!!0(object, !!0)</signature>
                        <name>FilterNull</name>
                    </method>
                    <method>
                        <signature>System.Reflection.Assembly[](string[])</signature>
                        <name>GetAssemblysByNames</name>
                    </method>
                    <method>
                        <arity>1</arity>
                        <signature>!!0(object)</signature>
                        <name>GetEnum</name>
                    </method>
                    <method>
                        <arity>1</arity>
                        <signature>!!0(object, !!0)</signature>
                        <name>GetEnum</name>
                    </method>
                    <method>
                        <arity>1</arity>
                        <signature>!!0(object, !!0, bool)</signature>
                        <name>GetEnum</name>
                    </method>
                    <method>
                        <arity>1</arity>
                        <signature>!!0(object, bool)</signature>
                        <name>GetEnum</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>GetQuarterOfYear</name>
                    </method>
                    <method>
                        <signature>int32(System.DateTime)</signature>
                        <name>GetQuarterOfYear</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>GetWeekOfYear</name>
                    </method>
                    <method>
                        <signature>int32(System.DateTime)</signature>
                        <name>GetWeekOfYear</name>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <name>PIC.PICPropertyChangedEventArgs</name>
                <methodlist>
                    <method>
                        <signature>void(string, object, object)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>object()</signature>
                        <name>get_NewValue</name>
                    </method>
                    <method>
                        <signature>object()</signature>
                        <name>get_OldValue</name>
                    </method>
                    <method>
                        <signature>void(object)</signature>
                        <name>set_NewValue</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>void(object)</signature>
                        <name>set_OldValue</name>
                        <newname>a</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>object</signature>
                        <name>&lt;NewValue&gt;k__BackingField</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>object</signature>
                        <name>&lt;OldValue&gt;k__BackingField</name>
                        <newname>b</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>PIC.PICPropertyChangedEventHandler</name>
                <methodlist>
                    <method>
                        <signature>void(object, native int)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>System.IAsyncResult(object, PIC.PICPropertyChangedEventArgs, System.AsyncCallback, object)</signature>
                        <name>BeginInvoke</name>
                    </method>
                    <method>
                        <signature>void(System.IAsyncResult)</signature>
                        <name>EndInvoke</name>
                    </method>
                    <method>
                        <signature>void(object, PIC.PICPropertyChangedEventArgs)</signature>
                        <name>Invoke</name>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <arity>1</arity>
                <genericparameter sequence="0">
                    <name>T</name>
                </genericparameter>
                <name>PIC.PropertyChangedEventArgs`1</name>
                <methodlist>
                    <method>
                        <signature>void(string, !0, !0)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>!0()</signature>
                        <name>get_NewValue</name>
                    </method>
                    <method>
                        <signature>!0()</signature>
                        <name>get_OldValue</name>
                    </method>
                    <method>
                        <signature>void(!0)</signature>
                        <name>set_NewValue</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>void(!0)</signature>
                        <name>set_OldValue</name>
                        <newname>a</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>!0</signature>
                        <name>&lt;NewValue&gt;k__BackingField</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>!0</signature>
                        <name>&lt;OldValue&gt;k__BackingField</name>
                        <newname>b</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <arity>1</arity>
                <genericparameter sequence="0">
                    <name>T</name>
                </genericparameter>
                <name>PIC.PropertyChangedEventHandler`1</name>
                <methodlist>
                    <method>
                        <signature>void(object, native int)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>System.IAsyncResult(object, PIC.PropertyChangedEventArgs`1&lt;!0&gt;, System.AsyncCallback, object)</signature>
                        <name>BeginInvoke</name>
                    </method>
                    <method>
                        <signature>void(System.IAsyncResult)</signature>
                        <name>EndInvoke</name>
                    </method>
                    <method>
                        <signature>void(object, PIC.PropertyChangedEventArgs`1&lt;!0&gt;)</signature>
                        <name>Invoke</name>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <arity>2</arity>
                <genericparameter sequence="0">
                    <name>TKey</name>
                </genericparameter>
                <genericparameter sequence="1">
                    <name>TValue</name>
                </genericparameter>
                <name>PIC.ReadOnlyDictionary`2</name>
                <methodlist>
                    <method>
                        <signature>void(System.Collections.Generic.IDictionary`2&lt;!0,!1&gt;)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>bool(System.Collections.Generic.KeyValuePair`2&lt;!0,!1&gt;)</signature>
                        <name>Contains</name>
                    </method>
                    <method>
                        <signature>bool(!0)</signature>
                        <name>ContainsKey</name>
                    </method>
                    <method>
                        <signature>void(System.Collections.Generic.KeyValuePair`2&lt;!0,!1&gt;[], int32)</signature>
                        <name>CopyTo</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_Count</name>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>get_IsReadOnly</name>
                    </method>
                    <method>
                        <signature>!1(!0)</signature>
                        <name>get_Item</name>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.ICollection`1&lt;!0&gt;()</signature>
                        <name>get_Keys</name>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.ICollection`1&lt;!1&gt;()</signature>
                        <name>get_Values</name>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.IEnumerator`1&lt;System.Collections.Generic.KeyValuePair`2&lt;!0,!1&gt;&gt;()</signature>
                        <name>GetEnumerator</name>
                    </method>
                    <method>
                        <signature>void(System.Collections.Generic.KeyValuePair`2&lt;!0,!1&gt;)</signature>
                        <name>System.Collections.Generic.ICollection&lt;System.Collections.Generic.KeyValuePair&lt;TKey,TValue&gt;&gt;.Add</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>System.Collections.Generic.ICollection&lt;System.Collections.Generic.KeyValuePair&lt;TKey,TValue&gt;&gt;.Clear</name>
                    </method>
                    <method>
                        <signature>bool(System.Collections.Generic.KeyValuePair`2&lt;!0,!1&gt;)</signature>
                        <name>System.Collections.Generic.ICollection&lt;System.Collections.Generic.KeyValuePair&lt;TKey,TValue&gt;&gt;.Remove</name>
                    </method>
                    <method>
                        <signature>void(!0, !1)</signature>
                        <name>System.Collections.Generic.IDictionary&lt;TKey,TValue&gt;.Add</name>
                    </method>
                    <method>
                        <signature>!1(!0)</signature>
                        <name>System.Collections.Generic.IDictionary&lt;TKey,TValue&gt;.get_Item</name>
                    </method>
                    <method>
                        <signature>bool(!0)</signature>
                        <name>System.Collections.Generic.IDictionary&lt;TKey,TValue&gt;.Remove</name>
                    </method>
                    <method>
                        <signature>void(!0, !1)</signature>
                        <name>System.Collections.Generic.IDictionary&lt;TKey,TValue&gt;.set_Item</name>
                    </method>
                    <method>
                        <signature>System.Collections.IEnumerator()</signature>
                        <name>System.Collections.IEnumerable.GetEnumerator</name>
                    </method>
                    <method>
                        <signature>bool(!0, !1&amp;)</signature>
                        <name>TryGetValue</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.Collections.Generic.IDictionary`2&lt;!0,!1&gt;</signature>
                        <name>_dictionary</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>PIC.Security.DESEncrypt</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>DecryptFile</name>
                    </method>
                    <method>
                        <signature>void(string, string)</signature>
                        <name>DecryptFile</name>
                    </method>
                    <method>
                        <signature>string(string)</signature>
                        <name>DecryptString</name>
                    </method>
                    <method>
                        <signature>string(string)</signature>
                        <name>DoDecryptString</name>
                    </method>
                    <method>
                        <signature>string(string, string)</signature>
                        <name>DoDecryptString</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>string(string, string)</signature>
                        <name>DoDecryptStringByMAC</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>string(string)</signature>
                        <name>DoEncryptString</name>
                    </method>
                    <method>
                        <signature>string(string, string)</signature>
                        <name>DoEncryptString</name>
                        <newname>d</newname>
                    </method>
                    <method>
                        <signature>string(string, string)</signature>
                        <name>DoEncryptStringByMAC</name>
                        <newname>c</newname>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>EncryptFile</name>
                    </method>
                    <method>
                        <signature>void(string, string)</signature>
                        <name>EncryptFile</name>
                    </method>
                    <method>
                        <signature>string(string)</signature>
                        <name>EncryptString</name>
                    </method>
                    <method>
                        <signature>System.Text.Encoding()</signature>
                        <name>get_EncodingMode</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_EncryptKey</name>
                    </method>
                    <method>
                        <signature>string(string)</signature>
                        <name>GetEncryptKey</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>string(string, int32)</signature>
                        <name>GetEncryptKey</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(System.Text.Encoding)</signature>
                        <name>set_EncodingMode</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_EncryptKey</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.Security.Cryptography.DES</signature>
                        <name>des</name>
                        <newname>d</newname>
                    </field>
                    <field>
                        <signature>System.Text.Encoding</signature>
                        <name>encoding</name>
                        <newname>c</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>iv</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>key</name>
                        <newname>b</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>PIC.Security.MACTripleDESEncrypt</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>unsigned int8[]()</signature>
                        <name>get_Data</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_Key</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>GetHashValue</name>
                    </method>
                    <method>
                        <signature>void(unsigned int8[])</signature>
                        <name>set_Data</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_Key</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>unsigned int8[]</signature>
                        <name>_data</name>
                        <newname>c</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>_key</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>System.Security.Cryptography.MACTripleDES</signature>
                        <name>mact</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>PIC.Security.MD5Encrypt</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>PIC.Security.MD5Encrypt()</signature>
                        <name>get_Instance</name>
                    </method>
                    <method>
                        <signature>string(string)</signature>
                        <name>GetMD5FromFile</name>
                    </method>
                    <method>
                        <signature>string(string)</signature>
                        <name>GetMD5FromString</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>PIC.Security.MD5Encrypt</signature>
                        <name>instance</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>System.Security.Cryptography.MD5</signature>
                        <name>md5</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>PIC.SelfIncreaseGenerator</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.cctor</name>
                    </method>
                    <method>
                        <signature>void(PIC.SelfIncreaseGenerator/IncreaseType)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(PIC.SelfIncreaseGenerator/IncreaseType, string)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(PIC.SelfIncreaseGenerator/IncreaseType, string, int32)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>string(string, string)</signature>
                        <name>AddSN</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>Generate</name>
                    </method>
                    <method>
                        <signature>PIC.SelfIncreaseGenerator/IncreaseType()</signature>
                        <name>get_IncType</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_MaxSN</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>get_SNLength</name>
                    </method>
                    <method>
                        <signature>string(PIC.SelfIncreaseGenerator/IncreaseType)</signature>
                        <name>GetAlphabetByIncreaseType</name>
                    </method>
                    <method>
                        <signature>string(PIC.SelfIncreaseGenerator/IncreaseType, string, int32)</signature>
                        <name>GetIncreasedSN</name>
                    </method>
                    <method>
                        <signature>void(PIC.SelfIncreaseGenerator/IncreaseType)</signature>
                        <name>set_IncType</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_MaxSN</name>
                    </method>
                    <method>
                        <signature>void(int32)</signature>
                        <name>set_SNLength</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>PIC.SelfIncreaseGenerator/IncreaseType</signature>
                        <name>&lt;IncType&gt;k__BackingField</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>&lt;MaxSN&gt;k__BackingField</name>
                        <newname>c</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>&lt;SNLength&gt;k__BackingField</name>
                        <newname>d</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>AlphabetBase10</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>AlphabetBase16</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>AlphabetBase2</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>AlphabetBase26</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>AlphabetBase36</name>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>AlphabetBase8</name>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.Dictionary`2&lt;PIC.SelfIncreaseGenerator/IncreaseType,string&gt;</signature>
                        <name>IncreaseTypeAlphabet</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>PIC.SelfIncreaseGenerator/IncreaseType</name>
                <methodlist />
                <fieldlist>
                    <field>
                        <signature>PIC.SelfIncreaseGenerator/IncreaseType</signature>
                        <name>Base10</name>
                    </field>
                    <field>
                        <signature>PIC.SelfIncreaseGenerator/IncreaseType</signature>
                        <name>Base16</name>
                    </field>
                    <field>
                        <signature>PIC.SelfIncreaseGenerator/IncreaseType</signature>
                        <name>Base2</name>
                    </field>
                    <field>
                        <signature>PIC.SelfIncreaseGenerator/IncreaseType</signature>
                        <name>Base26</name>
                    </field>
                    <field>
                        <signature>PIC.SelfIncreaseGenerator/IncreaseType</signature>
                        <name>Base36</name>
                    </field>
                    <field>
                        <signature>PIC.SelfIncreaseGenerator/IncreaseType</signature>
                        <name>Base8</name>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>value__</name>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>PIC.ServiceBus</name>
                <methodlist>
                    <method>
                        <signature>void(NServiceBus.IBus)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <arity>1</arity>
                        <signature>!!0()</signature>
                        <name>CreateInstance</name>
                    </method>
                    <method>
                        <arity>1</arity>
                        <signature>!!0(System.Action`1&lt;!!0&gt;)</signature>
                        <name>CreateInstance</name>
                    </method>
                    <method>
                        <signature>object(System.Type)</signature>
                        <name>CreateInstance</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>DoNotContinueDispatchingCurrentMessageToHandlers</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>ForwardCurrentMessageTo</name>
                    </method>
                    <method>
                        <signature>NServiceBus.IMessageContext()</signature>
                        <name>get_CurrentMessageContext</name>
                    </method>
                    <method>
                        <signature>System.Collections.Generic.IDictionary`2&lt;string,string&gt;()</signature>
                        <name>get_OutgoingHeaders</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>HandleCurrentMessageLater</name>
                    </method>
                    <method>
                        <arity>1</arity>
                        <signature>void(!!0[])</signature>
                        <name>Publish</name>
                    </method>
                    <method>
                        <arity>1</arity>
                        <signature>void(System.Action`1&lt;!!0&gt;)</signature>
                        <name>Publish</name>
                    </method>
                    <method>
                        <signature>void(NServiceBus.IMessage[])</signature>
                        <name>Reply</name>
                    </method>
                    <method>
                        <arity>1</arity>
                        <signature>void(System.Action`1&lt;!!0&gt;)</signature>
                        <name>Reply</name>
                    </method>
                    <method>
                        <signature>void(int32)</signature>
                        <name>Return</name>
                    </method>
                    <method>
                        <signature>NServiceBus.ICallback(NServiceBus.IMessage[])</signature>
                        <name>Send</name>
                    </method>
                    <method>
                        <signature>NServiceBus.ICallback(string, NServiceBus.IMessage[])</signature>
                        <name>Send</name>
                    </method>
                    <method>
                        <arity>1</arity>
                        <signature>NServiceBus.ICallback(string, System.Action`1&lt;!!0&gt;)</signature>
                        <name>Send</name>
                    </method>
                    <method>
                        <arity>1</arity>
                        <signature>NServiceBus.ICallback(System.Action`1&lt;!!0&gt;)</signature>
                        <name>Send</name>
                    </method>
                    <method>
                        <signature>void(string, string, NServiceBus.IMessage[])</signature>
                        <name>Send</name>
                    </method>
                    <method>
                        <arity>1</arity>
                        <signature>void(string, string, System.Action`1&lt;!!0&gt;)</signature>
                        <name>Send</name>
                    </method>
                    <method>
                        <signature>void(NServiceBus.IMessage[])</signature>
                        <name>SendLocal</name>
                    </method>
                    <method>
                        <arity>1</arity>
                        <signature>void(System.Action`1&lt;!!0&gt;)</signature>
                        <name>SendLocal</name>
                    </method>
                    <method>
                        <arity>1</arity>
                        <signature>void()</signature>
                        <name>Subscribe</name>
                    </method>
                    <method>
                        <arity>1</arity>
                        <signature>void(System.Predicate`1&lt;!!0&gt;)</signature>
                        <name>Subscribe</name>
                    </method>
                    <method>
                        <signature>void(System.Type)</signature>
                        <name>Subscribe</name>
                    </method>
                    <method>
                        <signature>void(System.Type, System.Predicate`1&lt;NServiceBus.IMessage&gt;)</signature>
                        <name>Subscribe</name>
                    </method>
                    <method>
                        <arity>1</arity>
                        <signature>void()</signature>
                        <name>Unsubscribe</name>
                    </method>
                    <method>
                        <signature>void(System.Type)</signature>
                        <name>Unsubscribe</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>NServiceBus.IBus</signature>
                        <name>bus</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>PIC.StringHelper</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>bool(System.Collections.IEnumerable, string, bool)</signature>
                        <name>Contains</name>
                    </method>
                    <method>
                        <signature>string(string)</signature>
                        <name>ConvertChineseToPY</name>
                    </method>
                    <method>
                        <signature>string(string)</signature>
                        <name>DecodeBase64</name>
                    </method>
                    <method>
                        <signature>string(System.Text.Encoding, string)</signature>
                        <name>DecodeBase64</name>
                    </method>
                    <method>
                        <signature>string(string)</signature>
                        <name>EncodeBase64</name>
                    </method>
                    <method>
                        <signature>string(System.Text.Encoding, string)</signature>
                        <name>EncodeBase64</name>
                    </method>
                    <method>
                        <signature>string(int32, string)</signature>
                        <name>GetStrByLength</name>
                    </method>
                    <method>
                        <signature>string(string)</signature>
                        <name>IsEmptyValue</name>
                    </method>
                    <method>
                        <signature>string(string, string)</signature>
                        <name>IsEmptyValue</name>
                    </method>
                    <method>
                        <signature>bool(string, string)</signature>
                        <name>IsEqualsIgnoreCase</name>
                    </method>
                    <method>
                        <signature>string(object)</signature>
                        <name>IsNullValue</name>
                    </method>
                    <method>
                        <signature>string(object, string)</signature>
                        <name>IsNullValue</name>
                    </method>
                    <method>
                        <signature>string(System.Collections.IEnumerable)</signature>
                        <name>Join</name>
                    </method>
                    <method>
                        <signature>string(System.Collections.IEnumerable, char)</signature>
                        <name>Join</name>
                    </method>
                    <method>
                        <signature>string(System.Collections.IEnumerable)</signature>
                        <name>JoinAndQuota</name>
                    </method>
                    <method>
                        <signature>string(System.Collections.IEnumerable, char)</signature>
                        <name>JoinAndQuota</name>
                    </method>
                    <method>
                        <signature>string(System.Collections.IEnumerable, char, string, string)</signature>
                        <name>JoinAndQuota</name>
                    </method>
                    <method>
                        <signature>string(System.Collections.IEnumerable, string, string)</signature>
                        <name>JoinAndQuota</name>
                    </method>
                    <method>
                        <signature>string(string, string, string)</signature>
                        <name>PeerOff</name>
                    </method>
                    <method>
                        <signature>string(string, string)</signature>
                        <name>Trim</name>
                    </method>
                    <method>
                        <signature>string(string, string)</signature>
                        <name>TrimEnd</name>
                    </method>
                    <method>
                        <signature>string(string, string)</signature>
                        <name>TrimStart</name>
                    </method>
                    <method>
                        <signature>string(string, string, string)</signature>
                        <name>Wrap</name>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <name>PIC.StringHelper/ChsToPY</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.cctor</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>string(string)</signature>
                        <name>Convert</name>
                    </method>
                    <method>
                        <signature>string(string)</signature>
                        <name>GetCode</name>
                    </method>
                    <method>
                        <signature>string(string)</signature>
                        <name>ToTitleCase</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>int32[]</signature>
                        <name>pyCodeList</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>string[]</signature>
                        <name>pyList</name>
                        <newname>b</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>PIC.StringParam</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(string, string, string)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_DivChar</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>get_GapChar</name>
                    </method>
                    <method>
                        <signature>string[](string)</signature>
                        <name>GetArray</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>Init</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_DivChar</name>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>set_GapChar</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>ToString</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>string</signature>
                        <name>divChar</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>string</signature>
                        <name>gapChar</name>
                        <newname>b</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>PIC.SystemHelper</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>GetMACAddress</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>GetPath</name>
                    </method>
                    <method>
                        <signature>string(string)</signature>
                        <name>GetPath</name>
                    </method>
                    <method>
                        <signature>string()</signature>
                        <name>GetStackTraceInfo</name>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <name>PIC.XmlHelper</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(System.Xml.XmlElement, System.Xml.XmlElement)</signature>
                        <name>CopyXmlAttrs</name>
                    </method>
                    <method>
                        <signature>string(string)</signature>
                        <name>GetFormatXml</name>
                    </method>
                    <method>
                        <signature>string(System.Xml.XmlDocument, System.Text.Encoding)</signature>
                        <name>GetFormatXml</name>
                    </method>
                    <method>
                        <signature>System.Xml.Linq.XElement(string)</signature>
                        <name>LoadXmlAsXElement</name>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
        </module>
    </mapping>
    <statistics>
        <statisticline>
            <description>Total Classes</description>
            <statistic>186</statistic>
        </statisticline>
        <statisticline>
            <description>Total Methods</description>
            <statistic>1525</statistic>
        </statisticline>
        <statisticline>
            <description>Total Fields</description>
            <statistic>392</statistic>
        </statisticline>
        <statisticline>
            <description>Total Classes Renamed</description>
            <statistic>16</statistic>
            <statistic>8.60 %</statistic>
        </statisticline>
        <statisticline>
            <description>Total Methods Renamed</description>
            <statistic>119</statistic>
            <statistic>7.80 %</statistic>
        </statisticline>
        <statisticline>
            <description>Total Fields Renamed</description>
            <statistic>208</statistic>
            <statistic>53.06 %</statistic>
        </statisticline>
        <statisticline>
            <description>Methods Renamed to 'a'</description>
            <statistic>46</statistic>
            <statistic>3.02 %</statistic>
        </statisticline>
        <statisticline>
            <description>Methods Renamed to 'b'</description>
            <statistic>29</statistic>
            <statistic>1.90 %</statistic>
        </statisticline>
        <statisticline>
            <description>Methods Renamed to 'c'</description>
            <statistic>13</statistic>
            <statistic>0.85 %</statistic>
        </statisticline>
        <statisticline>
            <description>Methods Renamed to 'h'</description>
            <statistic>6</statistic>
            <statistic>0.39 %</statistic>
        </statisticline>
        <statisticline>
            <description>Methods Renamed to 'g'</description>
            <statistic>5</statistic>
            <statistic>0.33 %</statistic>
        </statisticline>
        <statisticline>
            <description>Methods Renamed to 'i'</description>
            <statistic>5</statistic>
            <statistic>0.33 %</statistic>
        </statisticline>
        <statisticline>
            <description>Methods Renamed to 'j'</description>
            <statistic>5</statistic>
            <statistic>0.33 %</statistic>
        </statisticline>
    </statistics>
</dotfuscatorMap>